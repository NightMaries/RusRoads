import { PointPair } from '../math/geometry/pointPair';
import { PointMap } from './PointMap';
export class PointPairMap {
    constructor() {
        this.size_ = 0;
        this.mapOfMaps = new PointMap();
    }
    clear() {
        this.mapOfMaps.clear();
        this.size_ = 0;
    }
    get size() {
        return this.size_;
    }
    set(pp, v) {
        const x = pp.first;
        const y = pp.second;
        let m = this.mapOfMaps.get(x);
        if (m == null)
            this.mapOfMaps.set(x, (m = new PointMap()));
        if (!m.has(y)) {
            this.size_++;
        }
        m.set(y, v);
    }
    delete(pp) {
        const x = pp.first;
        const y = pp.second;
        const m = this.mapOfMaps.get(x);
        if (m != null) {
            if (m.deleteP(y))
                this.size_--;
        }
    }
    has(pp) {
        const m = this.mapOfMaps.get(pp.first);
        return m != null && m.has(pp.second);
    }
    get_(p, q) {
        return this.get(new PointPair(p, q));
    }
    get(pp) {
        const m = this.mapOfMaps.get(pp.first);
        if (m == null)
            return;
        return m.get(pp.second);
    }
    *keys() {
        for (const p of this.mapOfMaps) {
            for (const yp of p[1]) {
                yield new PointPair(p[0], yp[0]);
            }
        }
    }
    *[Symbol.iterator]() {
        for (const [x, m] of this.mapOfMaps) {
            for (const [y, t] of m) {
                yield [new PointPair(x, y), t];
            }
        }
    }
    *values() {
        for (const p of this.mapOfMaps) {
            for (const yV of p[1]) {
                yield yV[1];
            }
        }
    }
}
//# sourceMappingURL=pointPairMap.js.map