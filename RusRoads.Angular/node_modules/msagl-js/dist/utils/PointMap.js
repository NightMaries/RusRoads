import { Point } from '../math/geometry/point';
export class PointMap {
    constructor() {
        this.size_ = 0;
        this.mapOfMaps = new Map();
    }
    deleteP(point) {
        return this.delete(point.x, point.y);
    }
    clear() {
        this.mapOfMaps.clear();
        this.size_ = 0;
    }
    get size() {
        return this.size_;
    }
    setxy(x, y, v) {
        let m = this.mapOfMaps.get(x);
        if (m == null)
            this.mapOfMaps.set(x, (m = new Map()));
        if (!m.has(y)) {
            this.size_++;
        }
        m.set(y, v);
    }
    set(p, v) {
        this.setxy(p.x, p.y, v);
    }
    delete(x, y) {
        const m = this.mapOfMaps.get(x);
        if (m != null) {
            if (m.delete(y))
                this.size_--;
            return true;
        }
        return false;
    }
    hasxy(x, y) {
        const m = this.mapOfMaps.get(x);
        return m != null && m.has(y);
    }
    has(p) {
        return this.hasxy(p.x, p.y);
    }
    getxy(x, y) {
        const m = this.mapOfMaps.get(x);
        if (m == null)
            return;
        return m.get(y);
    }
    get(p) {
        return this.getxy(p.x, p.y);
    }
    *keys() {
        for (const p of this.mapOfMaps) {
            for (const yp of p[1]) {
                yield new Point(p[0], yp[0]);
            }
        }
    }
    *[Symbol.iterator]() {
        for (const p of this.mapOfMaps) {
            for (const yV of p[1]) {
                yield [new Point(p[0], yV[0]), yV[1]];
            }
        }
    }
    *values() {
        for (const p of this.mapOfMaps) {
            for (const yV of p[1]) {
                yield yV[1];
            }
        }
    }
}
//# sourceMappingURL=PointMap.js.map