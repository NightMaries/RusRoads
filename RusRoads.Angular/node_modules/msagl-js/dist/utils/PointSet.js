import { Point } from '../math/geometry/point';
export class PointSet {
    constructor() {
        this.size_ = 0;
        this.mapOfSets = new Map();
    }
    delete(point) {
        return this.deletexy(point.x, point.y);
    }
    clear() {
        this.mapOfSets.clear();
        this.size_ = 0;
    }
    get size() {
        return this.size_;
    }
    static mk(points) {
        const ret = new PointSet();
        for (const p of points) {
            ret.add(p);
        }
        return ret;
    }
    addxy(x, y) {
        let m = this.mapOfSets.get(x);
        if (m == null)
            this.mapOfSets.set(x, (m = new Set()));
        if (!m.has(y)) {
            this.size_++;
        }
        m.add(y);
    }
    add(p) {
        this.addxy(p.x, p.y);
        return this;
    }
    deletexy(x, y) {
        const m = this.mapOfSets.get(x);
        if (m != null) {
            if (m.delete(y)) {
                this.size_--;
                return true;
            }
        }
        return false;
    }
    hasxy(x, y) {
        return this.mapOfSets.has(x) && this.mapOfSets.get(x).has(y);
    }
    has(p) {
        return this.hasxy(p.x, p.y);
    }
    forEach(callbackfn, thisArg) {
        for (const p of this) {
            callbackfn(p, p, thisArg);
        }
    }
    *entries() {
        for (const p of this) {
            yield [p, p];
        }
    }
    keys() {
        return this.values();
    }
    *values() {
        for (const p of this.mapOfSets) {
            for (const yV of p[1]) {
                yield new Point(p[0], yV);
            }
        }
    }
    [(Symbol.toStringTag, Symbol.iterator)]() {
        return this.values();
    }
}
//# sourceMappingURL=PointSet.js.map