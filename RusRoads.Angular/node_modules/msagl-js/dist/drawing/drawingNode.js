import { DrawingObject } from './drawingObject';
import { Color } from './color';
import { ShapeEnum } from './shapeEnum';
import { DrawingLabel } from './drawingLabel';
export class DrawingNode extends DrawingObject {
    constructor(n) {
        super(n);
        this.shape = ShapeEnum.box;
        this.padding = 2;
        this.xRad = 3;
        this.yRad = 3;
        this.fillcolor = Color.Transparent;
        this.labelMargin = 1;
        //  the non adgjacent edges should avoid being closer to the node than Padding
        this.labelWidthToHeightRatio = 1;
        if (n != null) {
            this.label = new DrawingLabel(n.id);
        }
        this.fontname = DrawingObject.defaultLabelFontName;
        this.fontsize = DrawingObject.defaultLabelFontSize;
    }
    get labelText() {
        return this.label.text;
    }
    set labelText(value) {
        this.label.text = value;
    }
    get Padding() {
        return this.padding;
    }
    set Padding(value) {
        this.padding = Math.max(0, value);
        // //RaiseVisualsChangedEvent(this, null);
    }
    // x radius of the rectangle box
    get XRadius() {
        return this.xRad;
    }
    set XRadius(value) {
        this.xRad = value;
        //RaiseVisualsChangedEvent(this, null);
    }
    //  y radius of the rectangle box
    get YRadius() {
        return this.yRad;
    }
    set YRadius(value) {
        this.yRad = value;
    }
    //  the default fill color
    static get DefaultFillColor() {
        return DrawingNode.defaultFillColor;
    }
    static set DefaultFillColor(value) {
        DrawingNode.defaultFillColor = value;
    }
    // Node fill color.
    get FillColor() {
        return this.fillcolor;
    }
    set FillColor(value) {
        this.fillcolor = value;
        //RaiseVisualsChangedEvent(this, null);
    }
    //  Node shape.
    get ShapeEnum() {
        return this.shape;
    }
    set ShapeEnum(value) {
        this.shape = value;
        //RaiseVisualsChangedEvent(this, null);
    }
    //  the node label margin
    get LabelMargin() {
        return this.labelMargin;
    }
    set LabelMargin(value) {
        this.labelMargin = value;
        //RaiseVisualsChangedEvent(this, null);
    }
    //  the label width to height ratio.
    get LabelWidthToHeightRatio() {
        return this.labelWidthToHeightRatio;
    }
    set LabelWidthToHeightRatio(value) {
        this.labelWidthToHeightRatio = value;
    }
    get node() {
        return this.attrCont;
    }
}
DrawingNode.defaultFillColor = Color.LightGray;
//# sourceMappingURL=drawingNode.js.map