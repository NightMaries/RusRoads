import { BasicGraph } from '../../structs/BasicGraph';
import { BasicGraphOnEdges } from '../../structs/basicGraphOnEdges';
import { IntPair } from '../../utils/IntPair';
import { GeomNode } from '../core/geomNode';
import { PolyIntEdge } from './polyIntEdge';
import { IntPairSet } from './../../utils/IntPairSet';
import { IEdge } from '../../structs/iedge';
export declare class VerticalConstraintsForSugiyama {
    getFeedbackSetExternal(intGraph: BasicGraph<GeomNode, PolyIntEdge>, nodeIdToIndex: Map<string, number>): IEdge[];
    maxLayerOfGeomGraph: Set<GeomNode>;
    minLayerOfGeomGraph: Set<GeomNode>;
    sameLayerConstraints: [GeomNode, GeomNode][];
    upDownConstraints: [GeomNode, GeomNode][];
    pinNodeToMaxLayer(node: GeomNode): void;
    pinNodeToMinLayer(node: GeomNode): void;
    get isEmpty(): boolean;
    clear(): void;
    gluedUpDownIntConstraints: IntPairSet;
    nodeIdToIndex: Map<string, number>;
    intGraph: BasicGraph<GeomNode, PolyIntEdge>;
    gluedIntGraph: BasicGraphOnEdges<IntPair>;
    maxRepresentative: number;
    minRepresentative: number;
    sameLayerDictionaryOfRepresentatives: Map<number, number>;
    representativeToItsLayer: Map<number, number[]>;
    maxLayerInt: number[];
    minLayerInt: number[];
    sameLayerInts: [number, number][];
    upDownInts: [number, number][];
    getFeedbackSetImp(intGraph: BasicGraph<GeomNode, PolyIntEdge>, nodeIdToIndex: Map<string, number>): IEdge[];
    removeCyclesFromGluedConstraints(): void;
    addMaxMinConstraintsToGluedConstraints(): void;
    glueTogetherSameConstraintsMaxAndMin(): void;
    gluedIntPairNN(p: [number, number]): IntPair;
    gluedIntPairI(p: PolyIntEdge): IntPair;
    gluedIntPair(p: IntPair): IntPair;
    gluedIntEdge(intEdge: PolyIntEdge): PolyIntEdge;
    nodeToRepr(node: number): number;
    createDictionaryOfSameLayerRepresentatives(): void;
    createGraphOfSameLayers(): BasicGraphOnEdges<IntPair>;
    createEdgesOfSameLayers(): IntPair[];
    glueSameLayerNodesOfALayer(sameLayerNodes: number[]): void;
    componentIsMinLayer(component: number[]): boolean;
    componentsIsMaxLayer(component: number[]): boolean;
    createIntegerConstraints(): void;
    createSameLayerConstraints(): void;
    createUpDownConstraints(): void;
    createIntConstraintsFromStringCouples(list: [GeomNode, GeomNode][]): [number, number][];
    createMinIntConstraints(): void;
    createMaxIntConstraints(): void;
    createIntConstraintsFromExtremeLayer(setOfNodes: Set<GeomNode>): number[];
    nodeIndex(node: GeomNode): number;
    getFeedbackSet(): IEdge[];
    unglueIntPairs(gluedEdges: IEdge[]): IterableIterator<IEdge>;
    unglueEdge(gluedEdge: IEdge): IterableIterator<IEdge>;
    createGluedGraph(): BasicGraphOnEdges<IntPair>;
    unglueNode(node: number): number[];
    getGluedNodeCounts(): number[];
}
