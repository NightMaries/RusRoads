import { CornerSite } from '../../math/geometry/cornerSite';
import { Point } from '../../math/geometry/point';
import { GeomGraph } from '../core/GeomGraph';
import { Anchor } from './anchor';
import { LayerArrays } from './LayerArrays';
import { NodeKind } from './NodeKind';
import { ProperLayeredGraph } from './ProperLayeredGraph';
export declare class RefinerBetweenTwoLayers {
    topNode: number;
    bottomNode: number;
    topSite: CornerSite;
    bottomSite: CornerSite;
    currentTopSite: CornerSite;
    currentBottomSite: CornerSite;
    layerArrays: LayerArrays;
    layeredGraph: ProperLayeredGraph;
    originalGraph: GeomGraph;
    topCorners: () => IterableIterator<Point>;
    bottomCorners: () => IterableIterator<Point>;
    anchors: Anchor[];
    layerSeparation: number;
    constructor(topNodeP: number, bottomNodeP: number, topSiteP: CornerSite, layerArraysP: LayerArrays, layeredGraphP: ProperLayeredGraph, originalGraphP: GeomGraph, anchorsP: Anchor[], layerSeparation: number);
    static Refine(topNodeP: number, bottomNode: number, topSiteP: CornerSite, anchors: Anchor[], layerArraysP: LayerArrays, layeredGraph: ProperLayeredGraph, originalGraph: GeomGraph, layerSeparation: number): void;
    Refine(): void;
    private FixCorner;
    private InsertSites;
    CalculateNewBottomSite(): boolean;
    private static absCotan;
    private CalculateNewTopSite;
    private Init;
    private IsTopToTheLeftOfBottom;
    NodeCorners(node: number): IterableIterator<Point>;
    CornersToTheLeftOfBottom(): IterableIterator<Point>;
    CornersToTheLeftOfTop(): IterableIterator<Point>;
    CornersToTheRightOfBottom(): IterableIterator<Point>;
    CornersToTheRightOfTop(): IterableIterator<Point>;
    private static PossibleCorner;
    private NodeLayer;
    IsLabel(u: number): boolean;
    private NodeUCanBeCrossedByNodeV;
    private AdjacentEdgesIntersect;
    private Intersect;
    private IncomingEdge;
    private OutcomingEdge;
    IsVirtualVertex(v: number): boolean;
    RightFromTheNode(layer: number[], vPosition: number, nodeKind: NodeKind, leftMostX: number, rightMostX: number): IterableIterator<number>;
    LeftFromTheNode(layer: number[], vPosition: number, nodeKind: NodeKind, leftMostX: number, rightMostX: number): IterableIterator<number>;
}
export declare function getAnchorDebugCurve(a: Anchor): any;
