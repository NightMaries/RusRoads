import { BasicGraph } from '../../structs/BasicGraph';
import { GeomNode } from '../core/geomNode';
import { LayerEdge } from './LayerEdge';
import { PolyIntEdge } from './polyIntEdge';
export declare class ProperLayeredGraph {
    BaseGraph: BasicGraph<GeomNode, PolyIntEdge>;
    virtualNodesToInEdges: LayerEdge[];
    virtualNodesToOutEdges: LayerEdge[];
    totalNumberOfNodes: number;
    firstVirtualNode: number;
    constructor(intGraph: BasicGraph<GeomNode, PolyIntEdge>);
    Initialize(intGraph: BasicGraph<GeomNode, PolyIntEdge>): void;
    edges_(): IterableIterator<LayerEdge>;
    get Edges(): IterableIterator<LayerEdge>;
    InEdges(node: number): IterableIterator<LayerEdge>;
    static LastEdge(e: PolyIntEdge): LayerEdge;
    InEdgeOfVirtualNode(node: number): LayerEdge;
    OutEdges(node: number): IterableIterator<LayerEdge>;
    OutDegreeIsMoreThanOne(node: number): boolean;
    InDegreeIsMoreThanOne(node: number): boolean;
    OutEdgeOfVirtualNode(node: number): LayerEdge;
    static FirstEdge(e: PolyIntEdge): LayerEdge;
    InEdgesCount(node: number): number;
    RealInEdgesCount(node: number): number;
    OutEdgesCount(node: number): number;
    RealOutEdgesCount(node: number): number;
    get NodeCount(): number;
    IsRealNode(node: number): boolean;
    IsVirtualNode(node: number): boolean;
    ReversedClone(): ProperLayeredGraph;
    CreateReversedEdges(): PolyIntEdge[];
    Succ(node: number): IterableIterator<number>;
    Pred(node: number): IterableIterator<number>;
}
