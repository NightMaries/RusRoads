import { Algorithm } from '../../utils/algorithm';
import { CancelToken } from '../../utils/cancelToken';
import { IntPair } from '../../utils/IntPair';
import { BasicGraphOnEdges as Graph } from '../../structs/basicGraphOnEdges';
import { PolyIntEdge } from './polyIntEdge';
export declare class Balancing extends Algorithm {
    jumpers: Set<number>;
    possibleJumperFeasibleIntervals: Map<number, IntPair>;
    vertsCounts: number[];
    dag: Graph<PolyIntEdge>;
    layering: number[];
    nodeCount: number[];
    cancelToken: CancelToken;
    static Balance(dag: Graph<PolyIntEdge>, layering: number[], nodeCount: number[], cancelObj: CancelToken): void;
    constructor(dag: Graph<PolyIntEdge>, layering: number[], nodeCount: number[], cancelToken: CancelToken);
    run(): void;
    Init(): void;
    Jump(jumper: number): void;
    IsJumper(v: number): boolean;
    UpdateRegionsForPossibleJumpersAndInsertJumpers(jumperLayer: number, jumper: number): void;
    InitJumpers(): void;
    CalculateRegionAndInsertJumper(i: number): void;
    InsertJumper(upLayer: number, lowLayer: number, jumper: number): void;
    CalcJumpInfo(upLayer: number, lowLayer: number, jumper: number): {
        jumperLayer: number;
        layerToJumpTo: number;
    };
    Up(i: number): number;
    Down(i: number): number;
    CalculateLayerCounts(): void;
    ChooseJumper(): number;
}
