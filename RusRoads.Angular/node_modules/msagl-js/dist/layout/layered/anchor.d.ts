import { Point, TriangleOrientation } from './../../math/geometry/point';
import { Polyline } from './../../math/geometry/polyline';
import { PolylinePoint } from './../../math/geometry/polylinePoint';
import { GeomNode } from './../core/geomNode';
export declare class Anchor {
    toString(): string;
    la: number;
    ra: number;
    ta: number;
    ba: number;
    private x_;
    private y_;
    polygonalBoundary_: Polyline;
    labelCornersPreserveCoefficient: number;
    node_: GeomNode;
    padding: number;
    alreadySitsOnASpline: boolean;
    labelIsToTheLeftOfTheSpline: boolean;
    labelIsToTheRightOfTheSpline: boolean;
    get leftAnchor(): number;
    set leftAnchor(value: number);
    get rightAnchor(): number;
    set rightAnchor(value: number);
    get topAnchor(): number;
    set topAnchor(value: number);
    get bottomAnchor(): number;
    set bottomAnchor(value: number);
    get left(): number;
    get right(): number;
    get top(): number;
    set top(value: number);
    get bottom(): number;
    set bottom(value: number);
    get leftTop(): Point;
    get leftBottom(): Point;
    get rightBottom(): Point;
    get node(): GeomNode;
    set node(value: GeomNode);
    get rightTop(): Point;
    constructor(labelCornersPreserveCoefficient: number);
    static mkAnchor(leftAnchor: number, rightAnchor: number, topAnchor: number, bottomAnchor: number, node: GeomNode, labelCornersPreserveCoefficient: number): Anchor;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get origin(): Point;
    get width(): number;
    get height(): number;
    get hasLabel(): boolean;
    get LabelWidth(): number;
    get polygonalBoundary(): Polyline;
    static pad(curve: Polyline, padding: number): Polyline;
    static padCorner(poly: Polyline, p0: PolylinePoint, p1: PolylinePoint, p2: PolylinePoint, padding: number): void;
    static padConvexCurve(poly: Polyline, padding: number): Polyline;
    static getPaddedCorner(first: PolylinePoint, second: PolylinePoint, third: PolylinePoint, padding: number): {
        a: Point;
        b: Point;
        numberOfPoints: number;
    };
    static orientations(poly: Polyline): IterableIterator<TriangleOrientation>;
    static curveIsConvex(poly: Polyline): boolean;
    creatPolygonalBoundaryWithoutPadding(): Polyline;
    get nodeBoundary(): import("../..").ICurve;
    standardRectBoundary(): Polyline;
    polygonOnLeftLabel(): Polyline;
    polygonOnRightLabel(): Polyline;
    move(p: Point): void;
}
