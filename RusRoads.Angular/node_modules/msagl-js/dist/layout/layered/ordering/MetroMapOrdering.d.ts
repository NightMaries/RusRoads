import { Point } from '../../../math/geometry/point';
import { PointMap } from '../../../utils/PointMap';
import { LayerArrays } from '../LayerArrays';
import { ProperLayeredGraph } from '../ProperLayeredGraph';
export declare class MetroMapOrdering {
    layerArrays: LayerArrays;
    nodePositions: Map<number, Point>;
    properLayeredGraph: ProperLayeredGraph;
    constructor(properLayeredGraph: ProperLayeredGraph, layerArrays: LayerArrays, nodePositions: Map<number, Point>);
    static UpdateLayerArrays0(properLayeredGraph: ProperLayeredGraph, layerArrays: LayerArrays, nodePositions: Map<number, Point>): void;
    static UpdateLayerArrays1(properLayeredGraph: ProperLayeredGraph, layerArrays: LayerArrays): void;
    static BuildInitialNodePositions(properLayeredGraph: ProperLayeredGraph, layerArrays: LayerArrays): Map<number, Point>;
    UpdateLayerArrays(): void;
    CreateInitialOrdering(): PointMap<Array<number>>;
    BuildOrdering(initialOrdering: PointMap<Array<number>>): PointMap<Array<number>>;
    BuildNodeOrdering(result: Array<number>, inverseToOrder: Map<number, number>): void;
    firstSucc(node: number): number;
    firstPred(node: number): number;
    Comparison(inverseToOrder: Map<number, number>): (node1: number, node2: number) => number;
    RestoreLayerArrays(ordering: PointMap<Array<number>>): void;
}
