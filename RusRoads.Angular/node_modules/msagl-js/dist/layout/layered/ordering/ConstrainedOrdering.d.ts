import { BasicGraph } from '../../../structs/BasicGraph';
import { IntPairMap } from '../../../utils/IntPairMap';
import { GeomGraph } from '../../core/GeomGraph';
import { GeomNode } from '../../core/geomNode';
import { Database } from '../Database';
import { HorizontalConstraintsForSugiyama } from '../HorizontalConstraintsForSugiyama';
import { LayerArrays } from '../LayerArrays';
import { PolyIntEdge } from '../polyIntEdge';
import { ProperLayeredGraph } from '../ProperLayeredGraph';
import { SugiyamaLayoutSettings } from '../SugiyamaLayoutSettings';
import { AdjacentSwapsWithConstraints } from './AdjacentSwapsWithConstraints';
import { LayerInfo } from './LayerInfo';
export declare class ConstrainedOrdering {
    geometryGraph: GeomGraph;
    intGraph: BasicGraph<Node, PolyIntEdge>;
    ProperLayeredGraph: ProperLayeredGraph;
    initialLayering: number[];
    layerInfos: LayerInfo[];
    LayerArrays: LayerArrays;
    horizontalConstraints: HorizontalConstraintsForSugiyama;
    numberOfNodesOfProperGraph: number;
    database: Database;
    xPositions: number[][];
    yetBestLayers: number[][];
    verticalEdges: Array<PolyIntEdge>;
    adjSwapper: AdjacentSwapsWithConstraints;
    settings: SugiyamaLayoutSettings;
    numberOfLayers: number;
    noGainSteps: number;
    static MaxNumberOfNoGainSteps: number;
    get NumberOfLayers(): number;
    NodeSeparation(): number;
    constructor(geomGraph: GeomGraph, basicIntGraph: BasicGraph<GeomNode, PolyIntEdge>, layering: number[], nodeIdToIndex: Map<string, number>, database: Database, settings: SugiyamaLayoutSettings);
    layersAreDoubled: boolean;
    get LayersAreDoubled(): boolean;
    set LayersAreDoubled(value: boolean);
    NeedToInsertLayers(layering: number[]): boolean;
    static ExistsShortMultiEdge(layering: number[], multiedges: IntPairMap<Array<PolyIntEdge>>): boolean;
    CreateMeasure(): number;
    HasCrossWeights(): boolean;
    static ExistsShortLabeledEdge(layering: number[], edges: Array<PolyIntEdge>): boolean;
    AllocateXPositions(): void;
    Order(): void;
    SetXPositions(): void;
    static BelongsToNeighbBlock(p: number, layerInfo: LayerInfo): boolean;
}
