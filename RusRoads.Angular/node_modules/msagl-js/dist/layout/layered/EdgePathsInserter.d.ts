import { BasicGraph } from '../../structs/BasicGraph';
import { GeomNode } from '../core/geomNode';
import { Database } from './Database';
import { LayerArrays } from './LayerArrays';
import { PolyIntEdge } from './polyIntEdge';
import { ProperLayeredGraph } from './ProperLayeredGraph';
export declare class EdgePathsInserter {
    database: Database;
    intGraph: BasicGraph<GeomNode, PolyIntEdge>;
    layeredGraph: ProperLayeredGraph;
    virtNodesToIntEdges: Map<number, PolyIntEdge>;
    NLayeredGraph: ProperLayeredGraph;
    la: LayerArrays;
    Nla: LayerArrays;
    get NLayering(): number[];
    static InsertPaths(layeredGraph: ProperLayeredGraph, la: LayerArrays, db: Database, intGraphP: BasicGraph<GeomNode, PolyIntEdge>): {
        layeredGraph: ProperLayeredGraph;
        la: LayerArrays;
    };
    constructor(layeredGraph: ProperLayeredGraph, la: LayerArrays, database: Database, intGraphP: BasicGraph<GeomNode, PolyIntEdge>);
    InsertPaths(): void;
    WidenOriginalLayers(): void;
    EdgeIsFlat(ie: PolyIntEdge): boolean;
    MapVirtualNodesToEdges(): void;
    private CreateFullLayeredGraph;
    static GetTarget(currentVV: number, e: PolyIntEdge, i: number, span: number): number;
    static GetSource(boxedVV: {
        currentVV: number;
    }, e: PolyIntEdge, i: number): number;
    InitNewLayering(): void;
}
