import { IIntEdge } from './iIntEdge';
import { GeomEdge } from './../core/geomEdge';
import { ICurve } from './../../math/geometry/icurve';
import { LayerEdge } from './LayerEdge';
import { Anchor } from './anchor';
export declare class PolyIntEdge implements IIntEdge {
    source: number;
    target: number;
    reversed: boolean;
    separation: number;
    weight: number;
    get CrossingWeight(): number;
    IsVirtualEdge: boolean;
    LayerEdges: LayerEdge[];
    edge: GeomEdge;
    constructor(source: number, target: number, geomEdge: GeomEdge, weight?: number, separation?: number);
    get hasLabel(): boolean;
    get labelWidth(): number;
    get labelHeight(): number;
    reverse(): void;
    toString(): string;
    get curve(): ICurve;
    set curve(value: ICurve);
    get underlyingPolyline(): import("../../math/geometry/smoothedPolyline").SmoothedPolyline;
    set underlyingPolyline(value: import("../../math/geometry/smoothedPolyline").SmoothedPolyline);
    get LayerSpan(): number;
    isSelfEdge(): boolean;
    reversedClone(): PolyIntEdge;
    get count(): number;
    getNode(i: number): number;
    updateEdgeLabelPosition(anchors: Anchor[]): void;
    [Symbol.iterator](): IterableIterator<number>;
    nodes(): IterableIterator<number>;
}
