import { Algorithm } from '../../utils/algorithm';
import { optimalPackingRunner } from '../core/GeomGraph';
import { edgeRouter, enforceLayoutSettings, layoutGeomGraphDetailed } from '../driver';
import { MdsGraphLayout } from './MDSGraphLayout';
import { MdsLayoutSettings } from './MDSLayoutSettings';
export function layoutGraphWithMds(geomGraph, cancelToken = null, flipToScreenCoords = true) {
    let mdsSettings;
    if (geomGraph.layoutSettings && geomGraph.layoutSettings instanceof MdsLayoutSettings)
        mdsSettings = geomGraph.layoutSettings;
    else
        mdsSettings = new MdsLayoutSettings();
    enforceLayoutSettings(geomGraph, mdsSettings);
    layoutGeomGraphDetailed(geomGraph, cancelToken, mdsLayoutRunner, edgeRouter, optimalPackingRunner, flipToScreenCoords);
}
// Initial layout using PivotMDS method for a graph with subgraphs
export class PivotMDS extends Algorithm {
    // Layout graph by the PivotMds method.  Uses spectral techniques to obtain a layout in
    // O(n^2) time when iterations with majorization are used, otherwise it is more like O(PivotNumber*n).
    constructor(graph, cancelToken, length, settings) {
        super(cancelToken);
        this.graph = graph;
        this.length = length;
        this.settings = settings;
        this.settings.ScaleX = this.settings.ScaleY = 200;
    }
    get scaleX() {
        return this.settings.ScaleX;
    }
    set scaleX(value) {
        /*Assert.assert(!isNaN(value))*/
        this.settings.ScaleX = value;
    }
    // scales the final layout by the specified factor on Y
    get scaleY() {
        return this.settings.ScaleY;
    }
    set scaleY(value) {
        /*Assert.assert(!isNaN(value))*/
        this.settings.ScaleY = value;
    }
    // Executes the actual algorithm.
    run() {
        // with 0 majorization iterations we just do PivotMDS
        const mdsLayout = new MdsGraphLayout(this.settings, this.graph, this.cancelToken, this.length);
        mdsLayout.run();
    }
}
// returns the map of pairs (new lifted GeomEdge, existing GeomEdge)
function mdsLayoutRunner(geomG, cancelToken) {
    const pmd = new PivotMDS(geomG, cancelToken, () => 1, geomG.layoutSettings);
    pmd.run();
}
//# sourceMappingURL=PivotMDS.js.map