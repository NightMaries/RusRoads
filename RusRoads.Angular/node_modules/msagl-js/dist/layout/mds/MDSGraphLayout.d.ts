import { Rectangle } from '../../math/geometry/rectangle';
import { GeomGraph } from '../core/GeomGraph';
import { MdsLayoutSettings } from './MDSLayoutSettings';
import { Algorithm } from '../../utils/algorithm';
import { CancelToken } from '../../utils/cancelToken';
import { GeomNode } from '../core/geomNode';
import { GeomEdge } from '../core/geomEdge';
import { LayoutSettings } from '../layered/SugiyamaLayoutSettings';
export declare class MdsGraphLayout extends Algorithm {
    graph: GeomGraph;
    length: (e: GeomEdge) => number;
    settings: MdsLayoutSettings;
    constructor(settings: MdsLayoutSettings, geometryGraph: GeomGraph, cancelToken: CancelToken, length: (e: GeomEdge) => number);
    run(): void;
    SetGraphBoundingBox(): void;
    static ScaleToAverageEdgeLength(g: GeomGraph, x: number[], y: number[], length: (e: GeomEdge) => number): void;
    static LayoutGraphWithMds(geometryGraph: GeomGraph, settings: MdsLayoutSettings, arrays: {
        x: number[];
        y: number[];
    }, length: (e: GeomEdge) => number): void;
    LayoutConnectedGraphWithMds(): void;
    ScaleNodes(nodes: GeomNode[], scale: number): void;
    static PackGraphs(graphs: GeomGraph[], settings: LayoutSettings): Rectangle;
}
