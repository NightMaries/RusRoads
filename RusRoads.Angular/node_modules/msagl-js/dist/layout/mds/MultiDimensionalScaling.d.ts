export declare class MultidimensionalScaling {
    static DoubleCenter(matrix: number[][]): void;
    static SquareEntries(matrix: number[][]): void;
    static Multiply(matrix: number[][], factor: number): void;
    static MultiplyX(A: number[][], x: number[]): number[];
    static Norm(x: number[]): number;
    static Normalize(x: number[]): number;
    static RandomUnitLengthVector(n: number): number[];
    static SpectralDecomposition(A: number[][], t: {
        u1: number[];
        lambda1: number;
        u2: number[];
        lambda2: number;
    }): void;
    static SpectralDecompositionIE(A: number[][], t: {
        u1: number[];
        lambda1: number;
        u2: number[];
        lambda2: number;
    }, maxIterations: number, epsilon: number): void;
    static DotProduct(x: number[], y: number[]): number;
    static MakeOrthogonal(x: number[], y: number[]): void;
    static ClassicalScaling(d: number[][], t: {
        u1: number[];
        u2: number[];
        lambda1: number;
        lambda2: number;
    }): void;
    static DistanceScalingSubset(d: number[][], x: number[], y: number[], w: number[][], numberOfIterations: number): void;
    static DistanceScaling(d: number[][], x: number[], y: number[], w: number[][], iter: number): void;
    static ExponentialWeightMatrix(d: number[][], exponent: number): number[][];
    static EuclideanDistanceMatrix(x: number[], y: number[]): number[][];
    static LandmarkClassicalScaling(d: number[][], t: {
        x: number[];
        y: number[];
    }, pivotArray: number[]): void;
}
