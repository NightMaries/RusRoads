import { Interval } from '../../math/geometry/Interval';
import { Point } from '../../math/geometry/point';
import { Size } from '../../math/geometry/rectangle';
import { RTree } from '../../math/geometry/RTree/RTree';
import { BinaryHeapPriorityQueue } from '../../structs/BinaryHeapPriorityQueue';
import { MstEdge } from './MstOnDelaunayTriangulation';
export declare class MstLineSweeper {
    _proximityEdges: Array<MstEdge>;
    _nodeSizes: Size[];
    _nodePositions: Point[];
    _forLayers: boolean;
    _intervalTree: RTree<number, number>;
    _q: BinaryHeapPriorityQueue;
    _numberOfOverlaps: number;
    constructor(proximityEdges: Array<MstEdge>, nodeSizes: Size[], nodePositions: Point[], forLayers: boolean);
    Run(): number;
    FindOverlaps(): void;
    RemoveIntervalFromTree(i: number): void;
    AddIntervalToTree(i: number): void;
    FindOverlapsWithInterval(i: number): void;
    GetInterval(i: number): Interval;
    InitQueue(): void;
}
