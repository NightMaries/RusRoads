//  This port is for an edge connecting a node inside of the curve going out of the curve and creating a hook to
//  connect to the curve
import { Port } from './port';
export class HookUpAnywhereFromInsidePort extends Port {
    constructor(boundaryCurve) {
        super();
        this.adjustmentAngle = Math.PI / 10;
        this.hookSize = 9;
        this.curve = boundaryCurve;
        this.location = this.curve().start;
    }
    mk(boundaryCurve, hookSize) {
        const ret = new HookUpAnywhereFromInsidePort(boundaryCurve);
        ret.HookSize = hookSize;
        return ret;
    }
    //  returns a point on the boundary curve
    get Location() {
        return this.location;
    }
    //  Gets the boundary curve of the port.
    get Curve() {
        return this.curve();
    }
    SetLocation(p) {
        this.location = p;
    }
    //  We are trying to correct the last segment of the polyline by make it perpendicular to the Port.Curve.
    // For this purpose we trim the curve by the cone of the angle 2*adjustment angle and project the point before the last of the polyline to this curve.
    get AdjustmentAngle() {
        return this.adjustmentAngle;
    }
    set AdjustmentAngle(value) {
        this.adjustmentAngle = value;
    }
    //  the size of the self-loop
    get HookSize() {
        return this.hookSize;
    }
    set HookSize(value) {
        this.hookSize = value;
    }
}
//# sourceMappingURL=hookUpAnywhereFromInsidePort.js.map