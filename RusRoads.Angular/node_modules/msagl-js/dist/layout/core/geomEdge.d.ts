import { GeomNode } from './geomNode';
import { Edge } from './../../structs/edge';
import { GeomObject } from './geomObject';
import { Rectangle } from './../../math/geometry/rectangle';
import { ICurve } from './../../math/geometry/icurve';
import { SmoothedPolyline } from './../../math/geometry/smoothedPolyline';
import { GeomLabel } from './geomLabel';
import { PlaneTransformation } from '../../math/geometry/planeTransformation';
import { Port } from './port';
import { Point } from '../../math/geometry/point';
import { Arrowhead } from './arrowhead';
export declare class GeomEdge extends GeomObject {
    sourcePort: Port;
    targetPort: Port;
    curve: ICurve;
    smoothedPolyline: SmoothedPolyline;
    sourceArrowhead: Arrowhead;
    targetArrowhead: Arrowhead;
    lineWidth: number;
    Translate(delta: Point): void;
    GetMaxArrowheadLength(): number;
    transform(matrix: PlaneTransformation): void;
    underlyingPolyline: SmoothedPolyline;
    label: GeomLabel;
    get labelBBox(): Rectangle;
    get edge(): Edge;
    get source(): GeomNode;
    get boundingBox(): Rectangle;
    isInterGraphEdge(): boolean;
    get target(): GeomNode;
    constructor(edge: Edge);
    toString(): string;
    static RouteSelfEdge(boundaryCurve: ICurve, howMuchToStickOut: number, t: {
        smoothedPolyline: SmoothedPolyline;
    }): ICurve;
    underCollapsedCluster(): boolean;
}
