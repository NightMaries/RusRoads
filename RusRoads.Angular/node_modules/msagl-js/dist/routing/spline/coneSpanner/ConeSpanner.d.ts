import { Point } from '../../..';
import { Polyline } from '../../../math/geometry';
import { Algorithm } from '../../../utils/algorithm';
import { PointSet } from '../../../utils/PointSet';
import { VisibilityGraph } from '../../visibility/VisibilityGraph';
export declare class ConeSpanner extends Algorithm {
    _obstacles: Array<Polyline>;
    _visibilityGraph: VisibilityGraph;
    coneAngle: number;
    _bidirectional: boolean;
    constructor(obstacles: Array<Polyline>, visibilityGraph: VisibilityGraph);
    static mk(obstacles: Array<Polyline>, visibilityGraph: VisibilityGraph, coneAngle: number, ports: PointSet, borderPolyline: Polyline): ConeSpanner;
    get ConeAngle(): number;
    set ConeAngle(value: number);
    ports: PointSet;
    get Ports(): PointSet;
    set Ports(value: PointSet);
    borderPolyline: Polyline;
    get BorderPolyline(): Polyline;
    set BorderPolyline(value: Polyline);
    get Bidirectional(): boolean;
    set Bidirectional(value: boolean);
    static GetTotalSteps(coneAngle: number): number;
    run(): void;
    HandleBideractionalCase(): void;
    AddIntersectionOfBothDirectionSweepsToTheResult(vg0: VisibilityGraph, vg1: VisibilityGraph): void;
    AddDirection(direction: Point, borderPolyline: Polyline, visibilityGraph: VisibilityGraph): void;
}
