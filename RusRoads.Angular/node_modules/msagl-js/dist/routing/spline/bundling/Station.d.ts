import { Point, ICurve } from '../../..';
import { Polyline } from '../../../math/geometry';
import { CdtTriangle } from '../../ConstrainedDelaunayTriangulation/CdtTriangle';
import { BundleBase } from './BundleBase';
import { MetroNodeInfo } from './MetroNodeInfo';
export declare class Station {
    constructor(serialNumber: number, isRealNode: boolean, position: Point);
    debStop(): boolean;
    SerialNumber: number;
    IsReal: boolean;
    Radius: number;
    private _Position;
    get Position(): Point;
    set Position(value: Point);
    Neighbors: Station[];
    BundleBases: Map<Station, BundleBase>;
    EnterableTightPolylines: Set<Polyline>;
    private EnterableLoosePolylines;
    getELP(): Set<Polyline>;
    setELP(s: Set<Polyline>): void;
    addEL(p: Polyline): void;
    MetroNodeInfos: Array<MetroNodeInfo>;
    BoundaryCurve: ICurve;
    static less(a: Station, b: Station): boolean;
    static greater(a: Station, b: Station): boolean;
    CdtTriangle: CdtTriangle;
    cachedRadiusCost: number;
    cachedBundleCost: number;
    private _cachedIdealRadius;
    get cachedIdealRadius(): number;
    set cachedIdealRadius(value: number);
    AddEnterableLoosePolyline(poly: Polyline): void;
    AddEnterableTightPolyline(poly: Polyline): void;
}
