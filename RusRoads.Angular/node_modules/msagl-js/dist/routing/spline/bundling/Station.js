import { Point } from '../../..';
//  (this needs to be public because it's used elsewhere in an interface implementation)
export class Station {
    constructor(serialNumber, isRealNode, position) {
        //  radius of the corresponding hub
        this.Radius = 0;
        //  it maps each neighbor to its hub
        this.BundleBases = new Map();
        //  MetroNodeInfos corresponding to the node
        this.MetroNodeInfos = new Array();
        this._cachedIdealRadius = 0;
        this.SerialNumber = serialNumber;
        this.IsReal = isRealNode;
        this.Position = position;
        // if (this.debStop()) {
        //   console.log(this)
        // }
    }
    debStop() {
        return (
        //(this.SerialNumber == 1 && this.Position.sub(new Point(706.0327200902565, 203.36018761064003)).length < 0.01) ||
        this.SerialNumber == 28 && this.Position.sub(new Point(841.2662778763244, 303.3817005853006)).length < 0.001);
    }
    get Position() {
        return this._Position;
    }
    set Position(value) {
        this._Position = value;
        // if (this.debStop()) {
        //   console.log(this)
        // }
    }
    getELP() {
        return this.EnterableLoosePolylines;
    }
    setELP(s) {
        // if (this.SerialNumber == 32 && s.size > 0) {
        //   console.log(this)
        // }
        this.EnterableLoosePolylines = s;
    }
    addEL(p) {
        // if (this.SerialNumber == 32) {
        //   console.log(this)
        // }
        this.EnterableLoosePolylines.add(p);
    }
    static less(a, b) {
        //Assert.assert(a == b || a.SerialNumber != b.SerialNumber)
        return a.SerialNumber < b.SerialNumber;
    }
    static greater(a, b) {
        return a.SerialNumber > b.SerialNumber;
    }
    get cachedIdealRadius() {
        return this._cachedIdealRadius;
    }
    set cachedIdealRadius(value) {
        //Assert.assert(!isNaN(value))
        this._cachedIdealRadius = value;
    }
    AddEnterableLoosePolyline(poly) {
        if (this.EnterableLoosePolylines == null) {
            this.EnterableLoosePolylines = new Set();
        }
        this.EnterableLoosePolylines.add(poly);
    }
    AddEnterableTightPolyline(poly) {
        if (this.EnterableTightPolylines == null) {
            this.EnterableTightPolylines = new Set();
        }
        this.EnterableTightPolylines.add(poly);
    }
}
//# sourceMappingURL=Station.js.map