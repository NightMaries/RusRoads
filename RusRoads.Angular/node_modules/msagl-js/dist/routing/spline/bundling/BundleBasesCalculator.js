import { HashSet } from '@esfx/collections';
import { Point } from '../../..';
//import {SvgDebugWriter} from '../../../../test/utils/svgDebugWriter'
import { Curve, PointLocation, LineSegment, GeomConstants } from '../../../math/geometry';
import { Ellipse } from '../../../math/geometry/ellipse';
import { TriangleOrientation } from '../../../math/geometry/point';
import { addToMapOfArrays } from '../../../utils/setOperations';
import { BundleBase } from './BundleBase';
import { BundleInfo } from './BundleInfo';
import { getOrientationOf3Vectors } from './MetroGraphData';
import { OrientedHubSegment } from './OrientedHubSegment';
export class BundleBasesCalculator {
    constructor(metroOrdering, metroGraphData, bundlingSettings) {
        this.fixedBundles = new HashSet();
        // the cooling scheme follows Yifan Hu, Efficient and high quality force-directed graph drawing
        this.stepsWithProgress = 0;
        this.metroOrdering = metroOrdering;
        this.metroGraphData = metroGraphData;
        this.bundlingSettings = bundlingSettings;
    }
    Run() {
        // HubDebugger.ShowHubs(metroGraphData, bundlingSettings, true);
        // HubDebugger.ShowHubs(metroGraphData, bundlingSettings);
        this.AllocateBundleBases();
        this.SetBasesRightLeftParamsToTheMiddles();
        if (this.bundlingSettings.KeepOverlaps) {
            this.UpdateSourceAndTargetBases();
            this.CreateOrientedSegs();
        }
        else {
            this.SetRightLeftParamsFeasiblySymmetrically();
            // EdgeNudger.ShowHubs(metroGraphData, metroOrdering, null);
            // these bases can be too wide and overlap each other, so we need to adjust them
            this.AdjustStartEndParamsToAvoidBaseOverlaps();
            this.UpdateSourceAndTargetBases();
            // EdgeNudger.ShowHubs(metroGraphData, metroOrdering, null);
            this.CreateOrientedSegs();
            // EdgeNudger.ShowHubs(metroGraphData, metroOrdering, null);
            // optimization: moving bases to reduce cost
            // TimeMeasurer.DebugOutput("Initial cost of bundle bases: " + Cost());
            if (this.bundlingSettings.RotateBundles)
                this.RotateBundlesToDiminishCost();
            // EdgeNudger.ShowHubs(metroGraphData, metroOrdering, null);
            this.AdjustStartEndParamsToAvoidBaseOverlaps();
            this.UpdateSourceAndTargetBases();
        }
        // TimeMeasurer.DebugOutput("Optimized cost of bundle bases: " + Cost());
        //             EdgeNudger.ShowHubs(metroGraphData, metroOrdering, null);
    }
    AllocateBundleBases() {
        this.externalBases = new Map();
        this.internalBases = new Map();
        this.Bundles = new Array();
        for (const station of this.metroGraphData.Stations) {
            if (station.BoundaryCurve == null)
                station.BoundaryCurve = Ellipse.mkCircle(station.Radius, station.Position);
        }
        for (const station of this.metroGraphData.Stations) {
            for (const neighbor of station.Neighbors) {
                if (station.SerialNumber < neighbor.SerialNumber) {
                    const bb = new BundleBase(this.metroGraphData.RealEdgeCount(station, neighbor), station.BoundaryCurve, station.Position, station.IsReal);
                    station.BundleBases.set(neighbor, bb);
                    const bb2 = new BundleBase(this.metroGraphData.RealEdgeCount(station, neighbor), neighbor.BoundaryCurve, neighbor.Position, neighbor.IsReal);
                    neighbor.BundleBases.set(station, bb2);
                    if (Curve.PointRelativeToCurveLocation(neighbor.Position, station.BoundaryCurve) != PointLocation.Outside) {
                        bb.IsParent = true;
                        addToMapOfArrays(this.internalBases, station.BoundaryCurve, bb);
                        addToMapOfArrays(this.externalBases, neighbor.BoundaryCurve, bb2);
                    }
                    else if (Curve.PointRelativeToCurveLocation(station.Position, neighbor.BoundaryCurve) != PointLocation.Outside) {
                        bb2.IsParent = true;
                        addToMapOfArrays(this.externalBases, station.BoundaryCurve, bb);
                        addToMapOfArrays(this.internalBases, neighbor.BoundaryCurve, bb2);
                    }
                    else {
                        addToMapOfArrays(this.externalBases, station.BoundaryCurve, bb);
                        addToMapOfArrays(this.externalBases, neighbor.BoundaryCurve, bb2);
                    }
                    const obstaclesToIgnore = this.metroGraphData.tightIntersections.ObstaclesToIgnoreForBundle(station, neighbor);
                    const bundle = new BundleInfo(bb, bb2, obstaclesToIgnore, this.bundlingSettings.EdgeSeparation, Array.from(this.metroOrdering.GetOrder(station, neighbor)).map((l) => l.Width / 2));
                    bb.OutgoingBundleInfo = bb2.IncomingBundleInfo = bundle;
                    this.Bundles.push(bundle);
                }
            }
        }
        //neighbors
        this.SetBundleBaseNeighbors();
    }
    SetBundleBaseNeighbors() {
        for (const c of this.externalBases.keys()) {
            const list = this.externalBases.get(c);
            this.SortBundlesCounterClockwise(list);
            //set left
            this.SetLeftRightBases(list);
        }
        for (const c of this.internalBases.keys()) {
            const list = this.internalBases.get(c);
            this.SortBundlesCounterClockwise(list);
            //set left
            this.SetLeftRightBases(list);
        }
    }
    SortBundlesCounterClockwise(list) {
        if (list.length > 2) {
            const pivot = list[0].OppositeBase.Position;
            const center = list[0].CurveCenter;
            list.sort((u, v) => {
                return getOrientationOf3Vectors(pivot.sub(center), u.OppositeBase.Position.sub(center), v.OppositeBase.Position.sub(center));
            });
        }
    }
    SetLeftRightBases(bases) {
        const count = bases.length;
        if (count <= 1) {
            return;
        }
        for (let i = 0; i < count; i++) {
            bases[i].Prev = bases[(i - 1 + count) % count];
            bases[i].Next = bases[(i + 1) % count];
        }
    }
    CreateOrientedSegs() {
        for (const metroline of this.metroGraphData.Metrolines) {
            this.CreateOrientedSegsOnLine(metroline);
        }
    }
    CreateOrientedSegsOnLine(line) {
        for (let polyPoint = line.Polyline.startPoint.next; polyPoint.next != null; polyPoint = polyPoint.next) {
            this.CreateOrientedSegsOnLineVertex(line, polyPoint);
        }
    }
    CreateOrientedSegsOnLineVertex(line, polyPoint) {
        const u = this.metroGraphData.PointToStations.get(polyPoint.prev.point);
        const v = this.metroGraphData.PointToStations.get(polyPoint.point);
        const w = this.metroGraphData.PointToStations.get(polyPoint.next.point);
        const h0 = v.BundleBases.get(u);
        const h1 = v.BundleBases.get(w);
        const j0 = this.metroOrdering.GetLineIndexInOrder(u, v, line);
        const j1 = this.metroOrdering.GetLineIndexInOrder(w, v, line);
        const or0 = (h0.OrientedHubSegments[j0] = new OrientedHubSegment(null, false, j0, h0));
        const or1 = (h1.OrientedHubSegments[j1] = new OrientedHubSegment(null, true, j1, h1));
        or1.Other = or0;
        or0.Other = or1;
    }
    UpdateSourceAndTargetBases() {
        for (const bundleInfo of this.Bundles) {
            bundleInfo.UpdateSourceAndTargetBases(true, true);
        }
    }
    SetBasesRightLeftParamsToTheMiddles() {
        for (const bundle of this.Bundles) {
            const sbase = bundle.SourceBase;
            const tbase = bundle.TargetBase;
            sbase.ParLeft = sbase.ParRight = this.GetBaseMiddleParamInDirection(sbase, sbase.Position, tbase.Position);
            tbase.ParLeft = tbase.ParRight = this.GetBaseMiddleParamInDirection(tbase, tbase.Position, sbase.Position);
        }
    }
    GetBaseMiddleParamInDirection(targetBase, sPos, neighbPos) {
        const curve = targetBase.Curve;
        const isCircle = curve instanceof Ellipse;
        if (isCircle) {
            const circle = curve;
            if (circle.isArc()) {
                return Point.angle(circle.aAxis, neighbPos.sub(sPos));
            }
        }
        const intersections = Curve.getAllIntersections(curve, LineSegment.mkPP(sPos, neighbPos), true);
        for (const intersectionInfo of intersections) {
            const xP = intersectionInfo.x;
            if (xP.sub(sPos).dot(xP.sub(neighbPos)) <= 0) {
                return intersectionInfo.par0;
            }
        }
        // SvgDebugWriter.dumpDebugCurves('/tmp/baseMiddle.svg', [
        //   DebugCurve.mkDebugCurveTWCI(100, 1, 'Red', curve),
        //   DebugCurve.mkDebugCurveTWCI(100, 1, 'Blue', LineSegment.mkPP(sPos, neighbPos)),
        // ])
        throw new Error();
    }
    SetRightLeftParamsFeasiblySymmetrically() {
        for (const bundle of this.Bundles) {
            bundle.SetParamsFeasiblySymmetrically(this.metroGraphData.TightTree);
        }
    }
    AdjustStartEndParamsToAvoidBaseOverlaps() {
        for (const c of this.externalBases.keys())
            this.AdjustCurrentBundleWidthsOnCurve(this.externalBases.get(c));
        for (const c of this.internalBases.keys())
            this.AdjustCurrentBundleWidthsOnCurve(this.internalBases.get(c));
    }
    AdjustCurrentBundleWidthsOnCurve(bases) {
        const count = bases.length;
        if (count <= 1)
            return;
        for (let i = 0; i < count; i++) {
            const rBase = bases[i];
            const lBase = rBase.Next;
            this.ShrinkBasesToMakeTwoConsecutiveNeighborsHappy(rBase, lBase);
            //Assert.assert(!rBase.Intersect(lBase))
        }
    }
    ShrinkBasesToMakeTwoConsecutiveNeighborsHappy(rBase, lBase) {
        if (!rBase.Intersect(lBase)) {
            return;
        }
        // segments are now [l1..r1] and [l2..r2]
        let l1 = rBase.ParRight;
        let r1 = rBase.ParLeft;
        let l2 = lBase.ParRight;
        let r2 = lBase.ParLeft;
        const span = lBase.ParameterSpan;
        // make them regular
        //make them regular
        if (l1 > r1)
            l1 -= span;
        if (l2 > r2)
            l2 -= span;
        //make them intersecting
        if (l2 > r1) {
            l2 -= span;
            r2 -= span;
        }
        if (l1 > r2) {
            l1 -= span;
            r1 -= span;
        }
        // they do intersect!
        //Assert.assert(!(l2 >= r1) && !(l1 >= r2))
        const t = this.RegularCut(l1, r1, l2, r2, rBase.Span, lBase.Span);
        const to = Point.getTriangleOrientation(lBase.CurveCenter, lBase.OppositeBase.InitialMidPoint, rBase.OppositeBase.InitialMidPoint);
        if (to == TriangleOrientation.Clockwise) {
            r1 = t;
            l2 = t;
        }
        else if (to == TriangleOrientation.Counterclockwise) {
            r2 = t;
            l1 = t;
        }
        else if (r2 - l1 >= r1 - l2) {
            r1 = t;
            l2 = t;
        }
        else {
            r2 = t;
            l1 = t;
        }
        // //Assert.assert(!rBase.Intersect(l1, r1, l2, r2));
        lBase.ParRight = lBase.AdjustParam(l2);
        lBase.ParLeft = lBase.AdjustParam(r2);
        rBase.ParRight = rBase.AdjustParam(l1);
        rBase.ParLeft = rBase.AdjustParam(r1);
    }
    //  find a cut point for 2 segments
    RegularCut(l1, r1, l2, r2, span1, span2) {
        let cutParam = (span1 * r2 + span2 * l1) / (span1 + span2);
        const mn = Math.min(r1, r2);
        const mx = Math.max(l1, l2);
        // //Assert.assert((lessOrEqual(mx, cutParam) && ApproximateComparer.LessOrEqual(cutParam, mn)));
        if (cutParam < mx) {
            cutParam = mx;
        }
        if (cutParam > mn) {
            cutParam = mn;
        }
        return cutParam;
    }
    RotateBundlesToDiminishCost() {
        let parameterChange = BundleBasesCalculator.MaxParameterChange;
        const t = { cost: this.Cost() };
        let iteration = 0;
        // HubDebugger.ShowHubs(metroGraphData, bundlingSettings, true);
        while (iteration++ < BundleBasesCalculator.MaxIterations) {
            const oldCost = t.cost;
            this.RotateBundlesToDiminishCostOneIteration(parameterChange, t);
            parameterChange = this.UpdateParameterChange(parameterChange, oldCost, t.cost);
            if (parameterChange < BundleBasesCalculator.MinParameterChange) {
                break;
            }
        }
        // TimeMeasurer.DebugOutput("bases optimization completed after " + iteration + " iterations (cost=" + cost + ")");
    }
    UpdateParameterChange(step, oldEnergy, newEnergy) {
        // cooling factor
        const T = 0.8;
        if (newEnergy + 1 < oldEnergy) {
            this.stepsWithProgress++;
            if (this.stepsWithProgress >= 5) {
                this.stepsWithProgress = 0;
                // step = Math.Min(MaxParameterChange, step / T);
                this.fixedBundles.clear();
            }
        }
        else {
            this.stepsWithProgress = 0;
            step *= T;
            this.fixedBundles.clear();
        }
        return step;
    }
    RotateBundlesToDiminishCostOneIteration(parameterChange, t) {
        let progress = false;
        for (const bundleInfo of this.Bundles) {
            if (this.fixedBundles.has(bundleInfo))
                continue;
            if (this.OptimizeBundle(bundleInfo, parameterChange, t)) {
                progress = true;
                /*bool isClusterS = bundleInfo.SourceBase.CurveCenter != bundleInfo.SourceBase.Position;
                            bool isClusterT = bundleInfo.TargetBase.CurveCenter != bundleInfo.TargetBase.Position;
                            while ((isClusterS || isClusterT) && OptimizeBundle(bundleInfo, parameterChange, ref cost)) { }*/
            }
            else
                this.fixedBundles.add(bundleInfo);
        }
        return progress;
    }
    OptimizeBundle(bundleInfo, parameterChange, t) {
        const bundleCost = this.CostBi(bundleInfo);
        if (bundleCost < BundleBasesCalculator.CostThreshold) {
            return false;
        }
        // choose the best step
        let bestDelta = 0;
        let bestJ = -1;
        let bestI = -1;
        for (let i = 0; i < BundleBasesCalculator.Deltas.length - 1; i++) {
            let delta = this.DeltaWithChangedAngles(BundleBasesCalculator.Deltas[i][0], BundleBasesCalculator.Deltas[i][1], 0, 0, bundleInfo, bundleCost, parameterChange);
            if (delta > BundleBasesCalculator.CostDeltaThreshold && delta > bestDelta) {
                bestI = i;
                bestJ = BundleBasesCalculator.Deltas.length - 1;
                bestDelta = delta;
            }
            delta = this.DeltaWithChangedAngles(0, 0, BundleBasesCalculator.Deltas[i][0], BundleBasesCalculator.Deltas[i][1], bundleInfo, bundleCost, parameterChange);
            if (delta > BundleBasesCalculator.CostDeltaThreshold && delta > bestDelta) {
                bestI = BundleBasesCalculator.Deltas.length - 1;
                bestJ = i;
                bestDelta = delta;
            }
        }
        if (bestDelta < BundleBasesCalculator.CostDeltaThreshold) {
            return false;
        }
        t.cost -= bestDelta;
        bundleInfo.RotateBy(BundleBasesCalculator.Deltas[bestI][0], BundleBasesCalculator.Deltas[bestI][1], BundleBasesCalculator.Deltas[bestJ][0], BundleBasesCalculator.Deltas[bestJ][1], parameterChange);
        return true;
    }
    DeltaWithChangedAngles(rotationOfSourceRigthPoint, rotationOfSourceLeftPoint, rotationOfTargetRigthPoint, rotationOfTargetLeftPoint, bundleInfo, bundleCost, parameterChange) {
        if (!bundleInfo.RotationIsLegal(rotationOfSourceRigthPoint, rotationOfSourceLeftPoint, rotationOfTargetRigthPoint, rotationOfTargetLeftPoint, parameterChange)) {
            return 0;
        }
        bundleInfo.RotateBy(rotationOfSourceRigthPoint, rotationOfSourceLeftPoint, rotationOfTargetRigthPoint, rotationOfTargetLeftPoint, parameterChange);
        const newCost = this.CostBN(bundleInfo, bundleCost);
        // restoring
        bundleInfo.RotateBy(rotationOfSourceRigthPoint * -1, rotationOfSourceLeftPoint * -1, rotationOfTargetRigthPoint * -1, rotationOfTargetLeftPoint * -1, parameterChange);
        return bundleCost - newCost;
    }
    CostBi(bundleInfo) {
        return (BundleBasesCalculator.SeparationCoeff * this.SeparationCost(bundleInfo) +
            (BundleBasesCalculator.SqueezeCoeff * this.SqueezeCost(bundleInfo) +
                (BundleBasesCalculator.AssymetryCoeff * this.AssymetryCost(bundleInfo) +
                    BundleBasesCalculator.CenterCoeff * this.CenterCostBi(bundleInfo))));
    }
    // this is an accelerated version of the above function (calculate cost partly)
    CostBN(bundleInfo, limit) {
        let cost = 0;
        cost = cost + BundleBasesCalculator.CenterCoeff * this.CenterCostBi(bundleInfo);
        if (cost > limit) {
            return cost;
        }
        cost = cost + BundleBasesCalculator.SeparationCoeff * this.SeparationCost(bundleInfo);
        if (cost > limit) {
            return cost;
        }
        cost = cost + BundleBasesCalculator.SqueezeCoeff * this.SqueezeCost(bundleInfo);
        if (cost > limit) {
            return cost;
        }
        cost = cost + BundleBasesCalculator.AssymetryCoeff * this.AssymetryCost(bundleInfo);
        return cost;
    }
    SqueezeCost(bundleInfo) {
        const middleLineDir = bundleInfo.TargetBase.MidPoint.sub(bundleInfo.SourceBase.MidPoint).normalize();
        const perp = middleLineDir.rotate90Ccw();
        const projecton0 = Math.abs(bundleInfo.SourceBase.RightPoint.sub(bundleInfo.SourceBase.LeftPoint).dot(perp));
        const projecton1 = Math.abs(bundleInfo.TargetBase.RightPoint.sub(bundleInfo.TargetBase.LeftPoint).dot(perp));
        const del0 = Math.abs(bundleInfo.TotalRequiredWidth - projecton0) / bundleInfo.TotalRequiredWidth;
        const del1 = Math.abs(bundleInfo.TotalRequiredWidth - projecton1) / bundleInfo.TotalRequiredWidth;
        const del = Math.abs(projecton0 - projecton1) / bundleInfo.TotalRequiredWidth;
        const cost = Math.exp(del0 * 10) - 1 + (Math.exp(del1 * 10) - 1);
        return cost + del;
    }
    CenterCostBi(bundleInfo) {
        if (!bundleInfo.SourceBase.BelongsToRealNode && !bundleInfo.TargetBase.BelongsToRealNode) {
            return 0;
        }
        return this.CenterCostBb(bundleInfo.SourceBase) + this.CenterCostBb(bundleInfo.TargetBase);
    }
    CenterCostBb(bundleBase) {
        if (!bundleBase.BelongsToRealNode) {
            return 0;
        }
        const currentMid = bundleBase.ParMid;
        const mn = Math.min(bundleBase.InitialMidParameter, currentMid);
        const mx = Math.max(bundleBase.InitialMidParameter, currentMid);
        const dist = Math.min(mx - mn, mn + (bundleBase.ParameterSpan - mx));
        if (bundleBase.CurveCenter.equal(bundleBase.Position) || bundleBase.IsParent) {
            return 25 * (dist * dist);
        }
        else {
            return 500 * (dist * dist);
        }
    }
    AssymetryCost(bundleInfo) {
        return this.GetAssymetryCostForBase(bundleInfo.SourceBase) + this.GetAssymetryCostForBase(bundleInfo.TargetBase);
    }
    GetAssymetryCostForBase(bundleBase) {
        if (bundleBase.BelongsToRealNode) {
            return 0;
        }
        const assymetryWeight = bundleBase.OppositeBase.BelongsToRealNode ? 200 : 500;
        let cost = 0;
        for (const o of bundleBase.OrientedHubSegments) {
            const i0 = o.Index;
            const i1 = o.Other.Index;
            const a = bundleBase.Points[i0];
            const ta = bundleBase.Tangents[i0];
            const oppositeBase = o.Other.BundleBase;
            const b = oppositeBase.Points[i1];
            const tb = oppositeBase.Tangents[i1];
            const s = bundleBase.Count + oppositeBase.Count;
            cost += this.GetAssymetryCostOnData(a, ta, b, tb, assymetryWeight) / s;
        }
        return cost;
    }
    GetAssymetryCostOnData(a, tangentA, b, tangentB, assymetryWeight) {
        const xAxis = a.sub(b);
        const len = xAxis.length;
        if (len < GeomConstants.distanceEpsilon) {
            return 0;
        }
        len;
        // Tangents both have length 1. If they compensate each other on x-asis,
        // then their projections on y-axis are the same.
        const delx = tangentA.add(tangentB).dot(xAxis);
        // const yAxis = xAxis.Rotate90Ccw();
        // const ay = tangentA * yAxis;
        // const by = tangentB * yAxis;
        const ay = Point.crossProduct(xAxis, tangentA);
        const by = Point.crossProduct(xAxis, tangentB);
        const dely = ay - by;
        // double ac = Math.Sqrt(delx * delx + dely * dely);
        // double bc = Math.Sqrt(ay * ay + by * by);
        const ac = delx * delx + dely * dely;
        const bc = ay * ay + by * by;
        return 10 * ac + assymetryWeight * bc;
    }
    SeparationCost(bundleInfo) {
        return this.SeparationCostForBundleBase(bundleInfo.SourceBase) + this.SeparationCostForBundleBase(bundleInfo.TargetBase);
    }
    SeparationCostForBundleBase(bBase) {
        if (bBase.Prev == null) {
            return 0;
        }
        return this.SeparationCostForAdjacentBundleBases(bBase, bBase.Prev) + this.SeparationCostForAdjacentBundleBases(bBase, bBase.Next);
    }
    SeparationCostForAdjacentBundleBases(base0, base1) {
        //Assert.assert(base0.Curve == base1.Curve)
        const boundaryCurve = base0.Curve;
        const len = this.IntervalsOverlapLength(base0.ParRight, base0.ParLeft, base1.ParRight, base1.ParLeft, boundaryCurve);
        const mn = Math.min(base0.Span, base1.Span);
        ////Assert.assert(ApproximateComparer.LessOrEqual(len, mn));
        ////Assert.assert((mn > 0));
        return Math.exp(len / (mn * 10)) - 1;
    }
    //  returns the length of the overlapped interval of parameter space
    IntervalsOverlapLength(a, b, c, d, curve) {
        const s = curve.parStart;
        const e = curve.parEnd;
        if (a < b) {
            if (c < d) {
                return this.IntersectRegularIntervals(a, b, c, d);
            }
            return this.IntersectRegularIntervals(a, b, c, e) + this.IntersectRegularIntervals(a, b, s, d);
        }
        if (c < d) {
            return this.IntersectRegularIntervals(a, e, c, d) + this.IntersectRegularIntervals(s, b, c, d);
        }
        return this.IntersectRegularIntervals(a, e, c, e) + this.IntersectRegularIntervals(s, b, s, d);
    }
    IntersectRegularIntervals(a, b, c, d) {
        const low = Math.max(a, c);
        const up = Math.min(b, d);
        if (low < up) {
            return up - low;
        }
        return 0;
    }
    Cost() {
        let cost = 0;
        for (const bundleInfo of this.Bundles) {
            const c1 = BundleBasesCalculator.SeparationCoeff * this.SeparationCost(bundleInfo);
            const c2 = BundleBasesCalculator.AssymetryCoeff * this.AssymetryCost(bundleInfo);
            const c3 = BundleBasesCalculator.SqueezeCoeff * this.SqueezeCost(bundleInfo);
            const c4 = BundleBasesCalculator.CenterCoeff * this.CenterCostBi(bundleInfo);
            cost += (c1 + c2) / 2 + c3 + c4;
            ////Assert.assert(cost < Number.POSITIVE_INFINITY)
        }
        return cost;
    }
}
/** 1(-1) rotate point CCW(CW)*/
BundleBasesCalculator.Deltas = [
    [1, -1],
    // [0, 1],
    //[-1, 1],
    // [1, 0],
    //  [-1, 0],
    //[1, -1],
    // [0, -1],
    [1, -1], //rotating the left point cw, the right ccw
];
BundleBasesCalculator.SeparationCoeff = 1;
BundleBasesCalculator.SqueezeCoeff = 1;
BundleBasesCalculator.CenterCoeff = 10;
BundleBasesCalculator.AssymetryCoeff = 1;
BundleBasesCalculator.MaxIterations = 200;
BundleBasesCalculator.MaxParameterChange = 8 / 360;
// it would be one degree for a circle
BundleBasesCalculator.MinParameterChange = 0.1 / 360;
BundleBasesCalculator.CostThreshold = 1e-5;
BundleBasesCalculator.CostDeltaThreshold = 0.01;
//# sourceMappingURL=BundleBasesCalculator.js.map