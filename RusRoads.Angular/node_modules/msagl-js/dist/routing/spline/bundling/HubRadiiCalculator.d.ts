import { Point } from '../../..';
import { BundlingSettings } from '../../BundlingSettings';
import { MetroGraphData } from './MetroGraphData';
import { Station } from './Station';
export declare class HubRadiiCalculator {
    metroGraphData: MetroGraphData;
    bundlingSettings: BundlingSettings;
    constructor(metroGraphData: MetroGraphData, bundlingSettings: BundlingSettings);
    CreateNodeRadii(): void;
    GrowHubs(useHalfEdgesAsIdealR: boolean): boolean;
    TryGrowHub(v: Station, useHalfEdgesAsIdealR: boolean): boolean;
    CalculatePotential(v: Station, useHalfEdgesAsIdealR: boolean): number;
    CalculateAllowedHubRadius(node: Station): number;
    static CalculateIdealHubRadius(metroGraphData: MetroGraphData, bundlingSettings: BundlingSettings, node: Station): number;
    static CalculateIdealHubRadiusWithNeighborsMBS(metroGraphData: MetroGraphData, bundlingSettings: BundlingSettings, node: Station): number;
    static CalculateIdealHubRadiusWithNeighborsMBNP(metroGraphData: MetroGraphData, bundlingSettings: BundlingSettings, node: Station, newPosition: Point): number;
    static CalculateIdealHubRadiusWithAdjacentEdges(bundlingSettings: BundlingSettings, node: Station): number;
    static GetMinRadiusForTwoAdjacentBundles(r: number, node: Station, nodePosition: Point, adj0: Station, adj1: Station, metroGraphData: MetroGraphData, bundlingSettings: BundlingSettings): number;
    static GetMinRadiusForTwoAdjacentBundlesNPPPNNB(r: number, a: Point, b: Point, c: Point, widthAB: number, widthAC: number, bundlingSettings: BundlingSettings): number;
}
