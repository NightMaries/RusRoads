export class TupleMap {
    constructor() {
        this.mainMap = new Map();
    }
    get isEmpty() {
        return this.mainMap.size == 0 || this.everyMapIsEmpty();
    }
    everyMapIsEmpty() {
        for (const b of this.mainMap.values()) {
            if (b.size)
                return false;
        }
        return true;
    }
    get(a, b) {
        const m = this.mainMap.get(a);
        if (m)
            return m.get(b);
    }
    has(a, b) {
        const m = this.mainMap.get(a);
        if (!m)
            return false;
        return m.has(b);
    }
    set(a, b, c) {
        let m = this.mainMap.get(a);
        if (!m) {
            m = new Map();
            this.mainMap.set(a, m);
        }
        m.set(b, c);
    }
    *[Symbol.iterator]() {
        for (const [a, m] of this.mainMap) {
            for (const [b, c] of m) {
                yield [a, b, c];
            }
        }
    }
    *keys() {
        for (const [a, m] of this.mainMap) {
            for (const [b] of m) {
                yield [a, b];
            }
        }
    }
}
//# sourceMappingURL=tupleMap.js.map