import { Point } from './../../math/geometry/point';
import { String } from 'typescript-string-operations';
//  an edge connecting two VisibilityVertices
export class VisibilityEdge {
    constructor(s, t, weight = 1) {
        this.LengthMultiplier = 1;
        // Assert.assert(!source.point.equal(target.point), 'Self-edges are not allowed')
        if (VisibilityEdge.closeuv(s, t) || VisibilityEdge.closeuv(t, s)) {
            console.log(s);
        }
        this.Source = s;
        this.Target = t;
        this.Weight = weight;
    }
    static closeuv(s, t) {
        return Point.closeDistEps(s.point, VisibilityEdge.u, 0.1) && Point.closeDistEps(t.point, VisibilityEdge.v, 0.1);
    }
    //  edge source point
    get SourcePoint() {
        return this.Source.point;
    }
    //  edge target point
    get TargetPoint() {
        return this.Target.point;
    }
    get Length() {
        return this.SourcePoint.sub(this.TargetPoint).length * this.LengthMultiplier;
    }
    toString() {
        return String.Format('{0}->{1} ({2})', this.Source, this.Target, this.Weight);
    }
    ReversedClone() {
        return new VisibilityEdge(this.Target, this.Source);
    }
    Clone() {
        return new VisibilityEdge(this.Source, this.Target);
    }
}
VisibilityEdge.u = new Point(545.833, 840.458);
VisibilityEdge.v = new Point(606.1667261889578, 786.2917261889578);
VisibilityEdge.DefaultWeight = 1;
//# sourceMappingURL=VisibilityEdge.js.map