import { RBNode } from '../../structs/RBTree/rbNode';
import { Point } from './../../math/geometry/point';
import { RBTree } from './../../structs/RBTree/rbTree';
import { VisibilityEdge } from './VisibilityEdge';
export declare class VisibilityVertex {
    point: Point;
    _isTerminal: boolean;
    _isShortestPathTerminal: boolean;
    _inEdges: VisibilityEdge[];
    get InEdges(): Array<VisibilityEdge>;
    _outEdges: RBTree<VisibilityEdge>;
    get OutEdges(): RBTree<VisibilityEdge>;
    get Degree(): number;
    InEdgesLength(): number;
    addInEdge(e: VisibilityEdge): void;
    Distance: number;
    get IsTerminal(): boolean;
    set IsTerminal(value: boolean);
    get IsShortestPathTerminal(): boolean;
    set IsShortestPathTerminal(value: boolean);
    constructor(point: Point);
    toString(): string;
    RemoveOutEdge(edge: VisibilityEdge): void;
    RemoveInEdge(edge: VisibilityEdge): void;
    static FindFirst(tree: RBTree<VisibilityEdge>, targetPoint: Point): RBNode<VisibilityEdge>;
    static FindFirst_t(n: RBNode<VisibilityEdge>, tree: RBTree<VisibilityEdge>, targetPoint: Point): RBNode<VisibilityEdge>;
    get(target: VisibilityVertex): VisibilityEdge;
    Compare(a: VisibilityEdge, b: VisibilityEdge): number;
    ClearEdges(): void;
}
