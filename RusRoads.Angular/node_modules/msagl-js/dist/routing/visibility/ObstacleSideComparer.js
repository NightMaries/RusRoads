import { Point } from '../../math/geometry/point';
// import {GeomConstants} from '../../math/geometry/geomConstants'
import { TriangleOrientation } from '../../math/geometry/point';
export class ObstacleSideComparer {
    constructor(lineSweeper) {
        this.lineSweeper = lineSweeper;
    }
    Compare(a, b) {
        const orient = Point.getTriangleOrientation(b.Start, b.End, this.x);
        switch (orient) {
            case TriangleOrientation.Collinear:
                return 0;
                break;
            case TriangleOrientation.Clockwise:
                return 1;
                break;
            default:
                return -1;
                break;
        }
    }
    SetOperand(side) {
        this.x = this.IntersectionOfSideAndSweepLine(side);
    }
    IntersectionOfSideAndSweepLine(obstacleSide) {
        const den = obstacleSide.Direction.dot(this.lineSweeper.SweepDirection);
        /*Assert.assert(Math.abs(den) > GeomConstants.distanceEpsilon)*/
        const t = (this.lineSweeper.Z - obstacleSide.Start.dot(this.lineSweeper.SweepDirection)) / den;
        return obstacleSide.Start.add(obstacleSide.Direction.mul(t));
    }
}
//# sourceMappingURL=ObstacleSideComparer.js.map