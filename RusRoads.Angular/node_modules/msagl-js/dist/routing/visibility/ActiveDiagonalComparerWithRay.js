import { Point } from '../..';
import { LinearSystem2 } from '../../math/geometry/linearSystem';
import { TriangleOrientation } from '../../math/geometry/point';
export class ActiveDiagonalComparerWithRay {
    get PointOnTangentAndInsertedDiagonal() {
        return this.pointOnTheRay;
    }
    set PointOnTangentAndInsertedDiagonal(value) {
        this.pointOnTheRay = value;
    }
    Compare(x, y) {
        // Assert.assert(ActiveDiagonalComparerWithRay.BelongsToTheDiagonal(this.PointOnTangentAndInsertedDiagonal, x.Start, x.End))
        if (!x.Start.equal(y.Start)) {
            switch (Point.getTriangleOrientation(this.PointOnTangentAndInsertedDiagonal, y.Start, y.End)) {
                case TriangleOrientation.Counterclockwise:
                    return -1;
                default:
                    return 1;
            }
        }
        else {
            return 0;
        }
    }
    static BelongsToTheDiagonal(IntersectionOfTheRayAndInsertedEdge, start, end) {
        return Point.closeDistEps(IntersectionOfTheRayAndInsertedEdge, Point.ClosestPointAtLineSegment(IntersectionOfTheRayAndInsertedEdge, start, end));
    }
    static IntersectDiagonalWithRay(pivot, pointOnRay, diagonal) {
        const ray = pointOnRay.sub(pivot);
        const source = diagonal.Start;
        const target = diagonal.End;
        // let x(t-s)+s is on the ray, then for some y we x(t-s)+s=y*ray+pivot, or x(t-s)-y*ray=pivot-s
        const result = LinearSystem2.solve(target.x - source.x, ray.x * -1, pivot.x - source.x, target.y - source.y, ray.y * -1, pivot.y - source.y);
        // Assert.assert(result && -GeomConstants.tolerance <= result.x && result.x <= 1 + GeomConstants.tolerance)
        return pivot.add(ray.mul(result.y));
    }
}
//# sourceMappingURL=ActiveDiagonalComparerWithRay.js.map