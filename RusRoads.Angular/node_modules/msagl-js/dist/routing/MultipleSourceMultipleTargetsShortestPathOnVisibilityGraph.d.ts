import { GenericBinaryHeapPriorityQueue } from '../structs/genericBinaryHeapPriorityQueue';
import { VisibilityEdge } from './visibility/VisibilityEdge';
import { VisibilityGraph } from './visibility/VisibilityGraph';
import { VisibilityVertex } from './visibility/VisibilityVertex';
export declare class MultipleSourceMultipleTargetsShortestPathOnVisibilityGraph {
    sources: Array<VisibilityVertex>;
    targets: Set<VisibilityVertex>;
    _current: VisibilityVertex;
    closestTarget: VisibilityVertex;
    upperBound: number;
    _visGraph: VisibilityGraph;
    constructor(sourceVisVertices: Array<VisibilityVertex>, targetVisVertices: Array<VisibilityVertex>, visibilityGraph: VisibilityGraph);
    GetPath(): Array<VisibilityVertex>;
    PassableOutEdge(e: VisibilityEdge): boolean;
    PassableInEdge(e: VisibilityEdge): boolean;
    static IsForbidden(e: VisibilityEdge): boolean;
    ProcessNeighbor(pq: GenericBinaryHeapPriorityQueue<VisibilityVertex>, l: VisibilityEdge, v: VisibilityVertex): void;
    CalculatePath(): Array<VisibilityVertex>;
}
