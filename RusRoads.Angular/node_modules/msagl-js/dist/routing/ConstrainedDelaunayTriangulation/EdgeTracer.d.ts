import { RBNode } from '../../structs/RBTree/rbNode';
import { RBTree } from '../../structs/RBTree/rbTree';
import { CdtEdge } from './CdtEdge';
import { CdtFrontElement } from './CdtFrontElement';
import { CdtSite } from './CdtSite';
import { CdtTriangle } from './CdtTriangle';
export declare class EdgeTracer {
    readonly edge: CdtEdge;
    readonly triangles: Set<CdtTriangle>;
    readonly front: RBTree<CdtFrontElement>;
    readonly leftPolygon: Array<CdtSite>;
    readonly rightPolygon: Array<CdtSite>;
    a: CdtSite;
    b: CdtSite;
    piercedEdge: CdtEdge;
    piercedTriangle: CdtTriangle;
    piercedToTheLeftFrontElemNode: RBNode<CdtFrontElement>;
    piercedToTheRightFrontElemNode: RBNode<CdtFrontElement>;
    elementsToBeRemovedFromFront: CdtFrontElement[];
    removedTriangles: CdtTriangle[];
    constructor(edge: CdtEdge, triangles: Set<CdtTriangle>, front: RBTree<CdtFrontElement>, leftPolygon: Array<CdtSite>, rightPolygon: Array<CdtSite>);
    Run(): void;
    Traverse(): void;
    ProcessLeftFrontPiercedElement(): void;
    FindPiercedTriangle(v: RBNode<CdtFrontElement>): void;
    FindMoreRemovedFromFrontElements(): void;
    ProcessPiercedEdge(): void;
    PrepareNextStateAfterPiercedEdge(): void;
    removePiercedTriangle(t: CdtTriangle): void;
    ProcessRightFrontPiercedElement(): void;
    AddSiteToLeftPolygon(site: CdtSite): void;
    AddSiteToPolygonWithCheck(site: CdtSite, list: Array<CdtSite>): void;
    AddSiteToRightPolygon(site: CdtSite): void;
    BIsReached(): boolean;
    Init(): void;
}
