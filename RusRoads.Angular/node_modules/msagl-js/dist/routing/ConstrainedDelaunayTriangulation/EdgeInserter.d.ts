import { RBTree } from '../../structs/RBTree/rbTree';
import { CdtEdge } from './CdtEdge';
import { CdtFrontElement } from './CdtFrontElement';
import { CdtSite } from './CdtSite';
import { CdtTriangle } from './CdtTriangle';
export declare class EdgeInserter {
    edge: CdtEdge;
    triangles: Set<CdtTriangle>;
    front: RBTree<CdtFrontElement>;
    createEdgeDelegate: (a: CdtSite, b: CdtSite) => CdtEdge;
    rightPolygon: Array<CdtSite>;
    leftPolygon: Array<CdtSite>;
    addedTriangles: Array<CdtTriangle>;
    constructor(edge: CdtEdge, triangles: Set<CdtTriangle>, front: RBTree<CdtFrontElement>, createEdgeDelegate: (a: CdtSite, b: CdtSite) => CdtEdge);
    Run(): void;
    UpdateFront(): void;
    AddEdgeToFront(e: CdtEdge): void;
    TriangulatePolygon0(polygon: Array<CdtSite>, a: CdtSite, b: CdtSite, reverseTrangleWhenCompare: boolean): void;
    TriangulatePolygon1(start: number, end: number, polygon: Array<CdtSite>, a: CdtSite, b: CdtSite, reverseTrangleWhenCompare: boolean): void;
    static LocalInCircle(v: CdtSite, a: CdtSite, b: CdtSite, c: CdtSite, reverseTrangleWhenCompare: boolean): boolean;
    TraceEdgeThroughTriangles(): void;
}
