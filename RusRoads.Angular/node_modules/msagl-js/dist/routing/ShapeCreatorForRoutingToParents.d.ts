import { GeomEdge, GeomGraph, GeomNode } from '..';
import { Shape } from './shape';
export declare class ShapeCreatorForRoutingToParents {
    static GetShapes(inParentEdges: Array<GeomEdge>, outParentEdges: Array<GeomEdge>): Array<Shape>;
    private static InsertEdgePortsToShapes;
    static BindShapes(nodesToShapes: Map<GeomNode, Shape>): void;
    static ProcessAncestorDescendantCouple(ancestor: GeomGraph, geomNode: GeomNode, nodesToShapes: Map<GeomNode, Shape>): void;
    static CreateShapeIfNeeeded(n: GeomNode, nodesToShapes: Map<GeomNode, Shape>): void;
    static NumberOfActiveNodesIsUnderThreshold(inParentEdges: Array<GeomEdge>, outParentEdges: Array<GeomEdge>, threshold: number): boolean;
    private static SetOfActiveNodesIsLargerThanThreshold;
}
