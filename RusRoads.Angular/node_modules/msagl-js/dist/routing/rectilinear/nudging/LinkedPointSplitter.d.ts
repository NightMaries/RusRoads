import { Point } from '../../../math/geometry/point';
import { GenericBinaryHeapPriorityQueue } from '../../../structs/genericBinaryHeapPriorityQueue';
import { RBTree } from '../../../structs/RBTree/rbTree';
import { LinkedPoint } from './LinkedPoint';
export declare class LinkedPointSplitter {
    constructor(horizontalPoints: Array<LinkedPoint>, verticalPoints: Array<LinkedPoint>);
    HorizontalPoints: Array<LinkedPoint>;
    VerticalPoints: Array<LinkedPoint>;
    SplitPoints(): void;
    ProcessEvents(): void;
    ProcessEvent(linkedPoint: LinkedPoint, z: number): void;
    IntersectWithTree(horizontalPoint: LinkedPoint): void;
    static TrySplitVerticalPoint(linkedPoint: LinkedPoint, point: Point): void;
    static TrySplitHorizontalPoint(horizontalPoint: LinkedPoint, point: Point, xAligned: boolean): LinkedPoint;
    ProcessHighLinkedPointEvent(linkedPoint: LinkedPoint): void;
    tree: RBTree<LinkedPoint>;
    ProcessLowLinkedPointEvent(linkedPoint: LinkedPoint): void;
    InitEventQueue(): void;
    static Low(vertPoint: LinkedPoint): number;
    static High(vertPoint: LinkedPoint): number;
    Queue: GenericBinaryHeapPriorityQueue<LinkedPoint>;
}
