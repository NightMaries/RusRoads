import { Point } from '../../../math/geometry/point';
import { PointMap } from '../../../utils/PointMap';
import { LinkedPoint } from './LinkedPoint';
import { Path } from './Path';
export declare class PathMerger {
    constructor(paths: Iterable<Path>);
    Paths: Iterable<Path>;
    verticesToPathOffsets: PointMap<Map<Path, LinkedPoint>>;
    MergePaths(): void;
    ProcessPath(path: Path): void;
    CollapseLoopingPath(loopingPath: Path, departureFromLooping: LinkedPoint, arrivalToLooping: LinkedPoint, stemPath: Path, arrivalToStem: LinkedPoint): void;
    static GetPointsInBetween(a: LinkedPoint, b: LinkedPoint): IterableIterator<Point>;
    ReplacePiece(a: LinkedPoint, b: LinkedPoint, points: Array<Point>, loopingPath: Path): void;
    CleanDisappearedPiece(a: LinkedPoint, b: LinkedPoint, loopingPath: Path): void;
    static Before(a: LinkedPoint, b: LinkedPoint): boolean;
    static FindLinkedPointInPath(path: Path, point: Point): LinkedPoint;
    InitVerticesToPathOffsetsAndRemoveSelfCycles(): void;
}
