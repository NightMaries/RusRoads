import { Point } from '../../math/geometry/point';
import { VisibilityGraph } from '../visibility/VisibilityGraph';
import { PointAndCrossingsList } from './PointAndCrossingsList';
import { ScanSegmentVectorItem } from './ScanSegmentVectorItem';
export declare class ScanSegmentVector {
    private vector;
    constructor(coordMap: Set<number>, isHorizontal: boolean);
    CurrentSlotIndex: number;
    get Length(): number;
    get CurrentSlot(): ScanSegmentVectorItem;
    Item(slot: number): ScanSegmentVectorItem;
    CreateScanSegment(start: Point, end: Point, weight: number, gbcList: PointAndCrossingsList): void;
    ScanSegmentsCompleteForCurrentSlot(): void;
    ScanSegmentsComplete(): void;
    Items(): ScanSegmentVectorItem[];
    ResetForIntersections(): void;
    IsHorizontal: boolean;
    FindNearest(coord: number, directionIfMiss: number): number;
    CreateSparseVerticesAndEdges(vg: VisibilityGraph): void;
    GetParallelCoord(site: Point): number;
    GetPerpendicularCoord(site: Point): number;
    ConnectAdjoiningSegmentEndpoints(): void;
    toString(): string;
}
