//  BasicObstacleSide is base class for an obstacle side that is to the low or high end of the
//  scanline-parallel coordinate, and knows which direction to traverse to find the endVertex.
//  This is different from RightObstacleSide or LeftObstacleSide, where the class itself is the
//  determinant of traversal direction being with or opposite to the clockwise polyline direction;
import { ObstacleSide } from '../spline/coneSpanner/ObstacleSide';
import { StaticGraphUtility } from './StaticGraphUtility';
//  BasicObstacleSide uses the ctor arg traverseClockwise to manage that.
export class BasicObstacleSide extends ObstacleSide {
    constructor(obstacle, startVertex, scanDir, traverseClockwise) {
        super(startVertex);
        this.Slope = 0;
        this.SlopeInverse = 0;
        this.Obstacle = obstacle;
        this.endVertex = traverseClockwise ? startVertex.nextOnPolyline : startVertex.prevOnPolyline;
        if (!scanDir.IsPerpendicularPP(startVertex.point, this.endVertex.point)) {
            this.Slope = StaticGraphUtility.Slope(startVertex.point, this.endVertex.point, scanDir);
            this.SlopeInverse = 1 / this.Slope;
        }
    }
    get Obstacle() {
        return this.obstacle;
    }
    set Obstacle(value) {
        this.obstacle = value;
    }
    get EndVertex() {
        return this.endVertex;
    }
}
export class LowObstacleSide extends BasicObstacleSide {
    constructor(obstacle, startVertex, scanDir) {
        super(obstacle, startVertex, scanDir, scanDir.IsHorizontal);
    }
}
export class HighObstacleSide extends BasicObstacleSide {
    constructor(obstacle, startVertex, scanDir) {
        super(obstacle, startVertex, scanDir, scanDir.IsVertical);
    }
}
//# sourceMappingURL=BasicObstacleSide.js.map