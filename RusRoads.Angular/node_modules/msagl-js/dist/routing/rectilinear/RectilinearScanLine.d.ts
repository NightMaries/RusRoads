import { Direction } from '../../math/geometry/direction';
import { Point } from '../../math/geometry/point';
import { RBNode } from '../../structs/RBTree/rbNode';
import { RBTree } from '../../structs/RBTree/rbTree';
import { BasicObstacleSide } from './BasicObstacleSide';
import { ScanDirection } from './ScanDirection';
export declare class RectilinearScanLine {
    scanDirection: ScanDirection;
    SideTree: RBTree<BasicObstacleSide>;
    private linePositionAtLastInsertOrRemove;
    constructor(scanDir: ScanDirection, start: Point);
    Insert(side: BasicObstacleSide, scanPos: Point): RBNode<BasicObstacleSide>;
    get Count(): number;
    Remove(side: BasicObstacleSide, scanPos: Point): void;
    Find(side: BasicObstacleSide): RBNode<BasicObstacleSide>;
    NextLowB(side: BasicObstacleSide): RBNode<BasicObstacleSide>;
    NextLowR(sideNode: RBNode<BasicObstacleSide>): RBNode<BasicObstacleSide>;
    NextHighB(side: BasicObstacleSide): RBNode<BasicObstacleSide>;
    NextHighR(sideNode: RBNode<BasicObstacleSide>): RBNode<BasicObstacleSide>;
    Next(dir: Direction, sideNode: RBNode<BasicObstacleSide>): RBNode<BasicObstacleSide>;
    Lowest(): RBNode<BasicObstacleSide>;
    Compare(first: BasicObstacleSide, second: BasicObstacleSide): number;
}
