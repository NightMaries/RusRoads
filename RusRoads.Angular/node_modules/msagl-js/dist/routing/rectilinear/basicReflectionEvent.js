import { SweepEvent } from '../spline/coneSpanner/SweepEvent';
export class BasicReflectionEvent extends SweepEvent {
    //  Called by StoreLookaheadSite only.
    constructor(initialObstacle, reflectingObstacle, site) {
        super();
        this.InitialObstacle = initialObstacle;
        this.ReflectingObstacle = reflectingObstacle;
        this.site = site;
    }
    //  Called by LowReflectionEvent or HighReflectionEvent ctors, which are called out of
    //  AddReflectionEvent, which in turn is called by LoadLookaheadIntersections.
    //  In this case we know the eventObstacle and initialObstacle are the same obstacle (the
    //  one that the reflected ray bounced off of, to generate the Left/HighReflectionEvent).
    static mk(previousSite, reflectingObstacle, site) {
        const ret = new BasicReflectionEvent(previousSite.ReflectingObstacle, reflectingObstacle, site);
        ret.PreviousSite = previousSite;
        return ret;
    }
    //  If true, we have a staircase situation.
    IsStaircaseStep(reflectionTarget) {
        return this.InitialObstacle == reflectionTarget;
    }
    get Site() {
        return this.site;
    }
}
//# sourceMappingURL=basicReflectionEvent.js.map