import { Point } from '../../math/geometry/point';
import { RBNode } from '../../structs/RBTree/rbNode';
import { RBTree } from '../../structs/RBTree/rbTree';
import { BasicReflectionEvent } from './basicReflectionEvent';
import { ScanDirection } from './ScanDirection';
export declare class LookaheadScan {
    eventTree: RBTree<BasicReflectionEvent>;
    findFirstPred: (b: BasicReflectionEvent) => boolean;
    scanDirection: ScanDirection;
    staleSites: Array<BasicReflectionEvent>;
    findFirstPoint: Point;
    constructor(scanDir: ScanDirection);
    Add(initialSite: BasicReflectionEvent): void;
    MarkStaleSite(siteEvent: BasicReflectionEvent): void;
    RemoveStaleSites(): void;
    RemoveSitesForFlatBottom(low: Point, high: Point): void;
    Find(site: Point): RBNode<BasicReflectionEvent>;
    RemoveExact(initialSite: BasicReflectionEvent): boolean;
    FindFirstInRange(low: Point, high: Point): RBNode<BasicReflectionEvent>;
    CompareToFindFirstPoint(treeItem: Point): number;
    FindNextInRange(prev: RBNode<BasicReflectionEvent>, high: Point): RBNode<BasicReflectionEvent>;
    CompareBB(lhs: BasicReflectionEvent, rhs: BasicReflectionEvent): number;
    Compare(lhs: Point, rhs: Point): number;
}
