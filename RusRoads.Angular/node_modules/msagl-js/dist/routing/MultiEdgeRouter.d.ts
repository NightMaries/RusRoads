import { ICurve, GeomEdge } from '..';
import { Point } from '../math/geometry';
import { RectangleNode } from '../math/geometry/RTree/RectangleNode';
import { BasicGraphOnEdges } from '../structs/basicGraphOnEdges';
import { IntPair } from '../utils/IntPair';
import { BundlingSettings } from './BundlingSettings';
import { InteractiveEdgeRouter } from './InteractiveEdgeRouter';
import { PreGraph } from './PreGraph';
import { Shape } from './shape';
export declare class MultiEdgeRouter {
    multiEdges: Array<GeomEdge[]>;
    interactiveEdgeRouter: InteractiveEdgeRouter;
    bundlingSettings: BundlingSettings;
    transparentShapeSetter: (e: GeomEdge) => Array<Shape>;
    nodeTree: RectangleNode<ICurve, Point>;
    constructor(multiEdges: Array<GeomEdge[]>, interactiveEdgeRouter: InteractiveEdgeRouter, nodeBoundaryCurves: Array<ICurve>, bundlingSettings: BundlingSettings, transparentShapeSetter: (e: GeomEdge) => Array<Shape>);
    run(): void;
    private GetPortCurve;
    GetIndependantPreGraphs(): Array<PreGraph>;
    UniteConnectedPreGraphs(t: {
        preGraphs: Array<PreGraph>;
    }): void;
    private AddIntersectingNodes;
    static GetIntersectionGraphOfPreGraphs(preGraphs: Array<PreGraph>): BasicGraphOnEdges<IntPair>;
    static EnumeratePairsOfIntersectedPreGraphs(preGraphs: Array<PreGraph>): Array<IntPair>;
    CreateInitialPregraphs(): Array<PreGraph>;
    private CreatePregraphFromSetOfEdgeGeometries;
}
