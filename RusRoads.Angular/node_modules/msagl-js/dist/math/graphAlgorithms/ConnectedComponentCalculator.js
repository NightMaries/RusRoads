import { Queue } from 'queue-typescript';
export function* GetConnectedComponents(graph) {
    const enqueueed = new Array(graph.nodeCount).fill(false);
    const queue = new Queue();
    for (let i = 0; i < graph.nodeCount; i++) {
        if (!enqueueed[i]) {
            const nodes = new Array();
            Enqueue(i, queue, enqueueed);
            while (queue.length > 0) {
                const s = queue.dequeue();
                nodes.push(s);
                for (const neighbor of Neighbors(graph, s)) {
                    Enqueue(neighbor, queue, enqueueed);
                }
            }
            yield nodes;
        }
    }
}
function* Neighbors(graph, s) {
    for (const e of graph.outEdges[s]) {
        yield e.target;
    }
    for (const e of graph.inEdges[s]) {
        yield e.source;
    }
}
function Enqueue(i, q, enqueueed) {
    if (enqueueed[i] == false) {
        q.enqueue(i);
        enqueueed[i] = true;
    }
}
//# sourceMappingURL=ConnectedComponentCalculator.js.map