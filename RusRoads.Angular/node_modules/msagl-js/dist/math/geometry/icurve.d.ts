import { PlaneTransformation } from './planeTransformation';
import { Point } from './point';
import { PN } from './parallelogramNode';
import { Rectangle } from './rectangle';
export interface ICurve {
    value(t: number): Point;
    derivative(t: number): Point;
    secondDerivative(t: number): Point;
    thirdDerivative(t: number): Point;
    pNodeOverICurve(): PN;
    boundingBox: Rectangle;
    parStart: number;
    parEnd: number;
    trim(start: number, end: number): ICurve;
    trimWithWrap(start: number, end: number): ICurve;
    translate(delta: Point): void;
    scaleFromOrigin(xScale: number, yScale: number): ICurve;
    start: Point;
    end: Point;
    reverse(): ICurve;
    offsetCurve(offset: number, dir: Point): ICurve;
    lengthPartial(start: number, end: number): number;
    length: number;
    getParameterAtLength(length: number): number;
    transform(transformation: PlaneTransformation): ICurve;
    closestParameterWithinBounds(targetPoint: Point, low: number, high: number): number;
    closestParameter(targetPoint: Point): number;
    clone(): ICurve;
    leftDerivative(t: number): Point;
    rightDerivative(t: number): Point;
    curvature(t: number): number;
    curvatureDerivative(t: number): number;
    curvatureSecondDerivative(t: number): number;
}
