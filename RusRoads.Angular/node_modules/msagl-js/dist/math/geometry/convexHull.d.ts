import { Point } from './point';
import { Polyline } from './polyline';
declare type HullPoint = {
    point: Point;
    deleted: boolean;
    stamp: number;
};
declare type HullStack = {
    point: Point;
    next: HullStack;
};
export declare class ConvexHull {
    hullPoints: HullPoint[];
    pivot: Point;
    stack: HullStack;
    stamp: number;
    constructor(bodyPoints: Iterable<Point>);
    SetPivotAndAllocateHullPointsArray(bodyPoints: Iterable<Point>): void;
    get StackTopPoint(): Point;
    get StackSecondPoint(): Point;
    static CalculateConvexHull(pointsOfTheBody: Iterable<Point>): IterableIterator<Point>;
    Calculate(): IterableIterator<Point>;
    EnumerateStack(): IterableIterator<Point>;
    Scan(): void;
    LeftTurnToPivot(): boolean;
    StackHasMoreThanTwoPoints(): boolean;
    Pop(): void;
    LeftTurn(i: number): boolean;
    BackSwitchOverPivot(point: Point): boolean;
    Push(p: number): void;
    SortAllPointsWithoutPivot(): void;
    static createConvexHullAsClosedPolyline(points: Iterable<Point>): Polyline;
}
export {};
