import { ICurve } from './icurve';
import { Rectangle } from './rectangle';
import { PN } from './parallelogramNode';
import { Point } from './point';
import { PlaneTransformation } from './planeTransformation';
export declare class Ellipse implements ICurve {
    box: Rectangle;
    pNode: PN;
    aAxis: Point;
    bAxis: Point;
    center: Point;
    parStart: number;
    parEnd: number;
    offsetCurve(offset: number, dir: Point): ICurve;
    reverse(): ICurve;
    static mkEllipsePPP(a: Point, b: Point, center: Point): Ellipse;
    constructor(parStart: number, parEnd: number, axis0: Point, axis1: Point, center: Point);
    get start(): Point;
    get end(): Point;
    trim(start: number, end: number): ICurve;
    trimWithWrap(start: number, end: number): ICurve;
    get boundingBox(): Rectangle;
    value(t: number): Point;
    derivative(t: number): Point;
    secondDerivative(t: number): Point;
    thirdDerivative(t: number): Point;
    pNodeOverICurve(): PN;
    setBoundingBox(): void;
    static mkEllipse(parStart: number, parEnd: number, axis0: Point, axis1: Point, centerX: number, centerY: number): Ellipse;
    static mkFullEllipsePPP(axis0: Point, axis1: Point, center: Point): Ellipse;
    static mkFullEllipseNNP(axisA: number, axisB: number, center: Point): Ellipse;
    static mkCircle(radius: number, center: Point): Ellipse;
    translate(delta: Point): void;
    scaleFromOrigin(xScale: number, yScale: number): Ellipse;
    getParameterAtLength(length: number): number;
    transform(transformation: PlaneTransformation): ICurve;
    closestParameterWithinBounds(targetPoint: Point, low: number, high: number): number;
    lengthPartial(start: number, end: number): number;
    get length(): number;
    clone(): Ellipse;
    closestParameter(targetPoint: Point): number;
    leftDerivative(t: number): Point;
    rightDerivative(t: number): Point;
    curvature(t: number): number;
    curvatureDerivative(t: number): number;
    curvatureSecondDerivative(t: number): number;
    orientedCounterclockwise(): boolean;
    fullBox(): Rectangle;
    isArc(): boolean;
}
