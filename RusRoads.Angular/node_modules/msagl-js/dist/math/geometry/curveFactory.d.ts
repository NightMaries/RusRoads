import { Ellipse } from './ellipse';
import { Curve } from './curve';
import { Point } from './point';
import { ICurve } from './icurve';
import { Polyline } from '.';
declare type RoundedRectRadii = {
    radX: number;
    radY: number;
};
export declare class CurveFactory {
    static createHexagon(width: number, height: number, center: Point): ICurve;
    static octagonPad: number;
    static createOctagon(width: number, height: number, center: Point): Polyline;
    static createInvertedHouse(width: number, height: number, center: Point): ICurve;
    static createHouse(width: number, height: number, center: Point): ICurve;
    static CreateDiamond(width: number, height: number, center: Point): ICurve;
    static rotateCurveAroundCenterByDegree(curve: ICurve, center: Point, angle: number): ICurve;
    static rotateCurveAroundCenterByRadian(curve: ICurve, center: Point, angle: number): ICurve;
    static mkCircle(radius: number, center: Point): Ellipse;
    static createRectangle(width: number, height: number, center: Point): Curve;
    static isRoundedRect(ic: ICurve): RoundedRectRadii | undefined;
    static mkRectangleWithRoundedCorners(width: number, height: number, radX: number, radY: number, center?: Point): Curve;
}
export {};
