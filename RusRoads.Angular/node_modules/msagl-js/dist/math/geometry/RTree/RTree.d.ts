import { IRectangle } from '../IRectangle';
import { RectangleNode } from './RectangleNode';
export declare function mkRTree<T, P>(rectsAndData: Array<[IRectangle<P>, T]>): RTree<T, P>;
export declare class RTree<T, P> {
    _rootNode: RectangleNode<T, P>;
    Clear(): void;
    NumberOfIntersectedIsLessThanBound(rect: IRectangle<P>, bound: number, conditionFunc: (t: T) => boolean): boolean;
    get RootNode(): RectangleNode<T, P>;
    set RootNode(value: RectangleNode<T, P>);
    constructor(rootNode: RectangleNode<T, P>);
    GetAllLeaves(): IterableIterator<T>;
    get Count(): number;
    Add(key: IRectangle<P>, value: T): void;
    AddNode(node: RectangleNode<T, P>): void;
    Rebuild(): void;
    private AddNodeToTreeRecursive;
    GetAllIntersecting(queryRegion: IRectangle<P>): T[];
    OneIntersecting(queryRegion: IRectangle<P>): {
        intersectedLeaf: T;
    };
    GetAllLeavesIntersectingRectangle(queryRegion: IRectangle<P>): Iterable<RectangleNode<T, P>>;
    IsIntersecting(queryRegion: IRectangle<P>): boolean;
    Contains(rectangle: IRectangle<P>, userData: T): boolean;
    Remove(rectangle: IRectangle<P>, userData: T): T;
    RemoveLeaf(leaf: RectangleNode<T, P>): void;
    UnbalancedNode(node: RectangleNode<T, P>): RectangleNode<T, P>;
}
