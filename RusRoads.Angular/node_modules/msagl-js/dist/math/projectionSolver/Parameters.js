///  Per-instance parameters for ProjectionSolver.Solver.Solve().
export class Parameters {
    ///  Constructor.
    constructor() {
        this.GapTolerance = 0.0001;
        this.QpscConvergenceEpsilon = 1e-5;
        this.QpscConvergenceQuotient = 1e-6;
        this.OuterProjectIterationsLimit = -1;
        this.InnerProjectIterationsLimit = -1;
        this.TimeLimit = -1;
        this.Advanced = new AdvancedParameters();
    }
    ///  Deep-copy the AdvancedParameters.
    ///  <returns></returns>
    Clone() {
        const newParams = this.MemberwiseClone();
        newParams.Advanced = this.Advanced.Clone();
        return newParams;
    }
    MemberwiseClone() {
        const par = new Parameters();
        par.GapTolerance = this.GapTolerance;
        par.QpscConvergenceEpsilon = this.QpscConvergenceEpsilon;
        par.QpscConvergenceQuotient = this.QpscConvergenceQuotient;
        par.OuterProjectIterationsLimit = this.OuterProjectIterationsLimit;
        par.InnerProjectIterationsLimit = this.InnerProjectIterationsLimit;
        par.TimeLimit = this.TimeLimit;
        return par;
    }
}
//  end struct Parameters
///  Parameter specification for advanced options.
export class AdvancedParameters {
    ///  Constructor.
    constructor() {
        this.ForceQpsc = false;
        this.ScaleInQpsc = true;
        this.MinSplitLagrangianThreshold = -1e-7;
        this.UseViolationCache = true;
        this.ViolationCacheMinBlocksDivisor = 10;
        this.ViolationCacheMinBlocksCount = 100;
    }
    ///  Shallow-copy the object (there is nothing requiring deep-copy).
    ///  <returns></returns>
    Clone() {
        const ret = new AdvancedParameters();
        ret.ForceQpsc = this.ForceQpsc;
        ret.ScaleInQpsc = this.ScaleInQpsc;
        ret.MinSplitLagrangianThreshold = this.MinSplitLagrangianThreshold;
        ret.UseViolationCache = this.UseViolationCache;
        ret.ViolationCacheMinBlocksDivisor = this.ViolationCacheMinBlocksDivisor;
        ret.ViolationCacheMinBlocksCount = this.ViolationCacheMinBlocksCount;
        return ret;
    }
}
//# sourceMappingURL=Parameters.js.map