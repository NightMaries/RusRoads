import { Constraint } from './Constraint';
import { ConstraintVector } from './ConstraintVector';
import { DfDvNode } from './DfDvNode';
import { Variable } from './Variable';
declare class ConstraintDirectionPair {
    Constraint: Constraint;
    IsForward: boolean;
    constructor(constraint: Constraint, isLeftToRight: boolean);
}
export declare class Block {
    Variables: Array<Variable>;
    ReferencePos: number;
    Scale: number;
    sumAd: number;
    sumAb: number;
    sumA2: number;
    VectorIndex: number;
    constraintPath: Array<ConstraintDirectionPair>;
    pathTargetVariable: Variable;
    allConstraints: ConstraintVector;
    constructor(initialVariable: Variable, allConstraints: ConstraintVector);
    toString(): string;
    dfDvDummyParentNode: DfDvNode;
    ComputeDfDv(initialVarToEval: Variable): void;
    ProcessDfDvLeafNode(node: DfDvNode): void;
    Debug_CheckForViolatedActiveConstraint(constraint: Constraint): void;
    ProcessDfDvLeafNodeDirectly(node: DfDvNode): void;
    GetDfDvNode(parent: DfDvNode, constraintToEval: Constraint, variableToEval: Variable, variableDoneEval: Variable): DfDvNode;
    PushDfDvNode(node: DfDvNode): void;
    AddVariableAndPushDfDvNode(lstVars: Array<Variable>, node: DfDvNode): void;
    PushOnDfDvStack(node: DfDvNode): void;
    CheckForConstraintPathTarget(node: DfDvNode): void;
    Expand(violatedConstraint: Constraint): void;
    Split(isQpsc: boolean): Block;
    SplitOnConstraint(constraintToSplit: Constraint): Block;
    AddVariable(variable: Variable): void;
    UpdateReferencePos(): void;
    AddVariableToBlockSums(variable: Variable): void;
    UpdateReferencePosFromSums(): void;
    UpdateVariablePositions(): void;
    GetConnectedVariables(lstVars: Array<Variable>, varToEval: Variable, varDoneEval: Variable): void;
    RecurseGetConnectedVariables(lstVars: Array<Variable>, initialVarToEval: Variable, initialVarDoneEval: Variable): void;
    TransferConnectedVariables(newSplitBlock: Block, varToEval: Variable, varDoneEval: Variable): void;
}
export {};
