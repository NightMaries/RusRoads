import { Constraint } from './Constraint';
import { Parameters } from './Parameters';
import { Solution } from './Solution';
import { Variable } from './Variable';
export declare class Solver {
    private allBlocks;
    private allConstraints;
    private numberOfConstraints;
    private numberOfVariables;
    private equalityConstraints;
    private loadedVariablesAndConstraintLists;
    private emptyConstraintList;
    private updatedConstraints;
    private violationCache;
    private lastModifiedBlock;
    private violationCacheMinBlockCutoff;
    private hasNeighbourPairs;
    private nextVariableOrdinal;
    private solverParams;
    private solverSolution;
    private get IsQpsc();
    AddVariableAN(userData: any, desiredPos: number): Variable;
    AddVariableANN(userData: any, desiredPos: number, weight: number): Variable;
    AddVariableANNN(userData: any, desiredPos: number, weight: number, scale: number): Variable;
    UpdateVariables(): void;
    get Variables(): Array<Variable>;
    get VariableCount(): number;
    Constraints(): IterableIterator<Constraint>;
    get ConstraintCount(): number;
    AddEqualityConstraint(left: Variable, right: Variable, gap: number): Constraint;
    AddConstraintVVNB(left: Variable, right: Variable, gap: number, isEquality: boolean): Constraint;
    AddConstraint(left: Variable, right: Variable, gap: number): Constraint;
    SetConstraintUpdate(constraint: Constraint, gap: number): void;
    AddNeighborPair(variable1: Variable, variable2: Variable, relationshipWeight: number): void;
    Solve(): Solution;
    SolvePar(solverParameters: Parameters): Solution;
    private CheckForUpdatedConstraints;
    private SplitOnConstraintIfActive;
    private SetupConstraints;
    private SolveByStandaloneProject;
    private RunProject;
    private CheckForLimitsExceeded;
    private CalculateStandaloneProjectGoalFunctionValue;
    private SolveQpsc;
    private QpscMakeFeasible;
    private ReinitializeBlocks;
    private MergeEqualityConstraints;
    private Project;
    private MergeBlocks;
    private SplitBlocks;
    private GetMaxViolatedConstraint;
    private SearchViolationCache;
    private SearchAllConstraints;
}
