import { BasicGraphOnEdges } from '../../structs/basicGraphOnEdges';
import { IntPair } from '../../utils/IntPair';
import { SolverShell } from './SolverShell';
import { UniformSolverVar } from './UniformSolverVar';
export declare class UniformOneDimensionalSolver {
    idealPositions: Map<number, number>;
    varSepartion: number;
    constructor(variableSeparation: number);
    varList: UniformSolverVar[];
    constraints: Set<IntPair>;
    graph: BasicGraphOnEdges<IntPair>;
    SetLowBound(bound: number, id: number): void;
    Var(id: number): UniformSolverVar;
    SetUpperBound(id: number, bound: number): void;
    private Solve;
    solverShell: SolverShell;
    SolveByRegularSolver(): void;
    GetBoundId(bound: number): number;
    CreateVariablesForBounds(): void;
    boundsToInt: Map<number, number>;
    RegisterBoundVar(bound: number): void;
    CreateGraphAndRemoveCycles(): void;
    GetVariablePosition(id: number): number;
    AddConstraint(i: number, j: number): void;
    AddVariableNNNN(id: number, currentPosition: number, idealPosition: number, width: number): void;
    AddFixedVariable(id: number, position: number): void;
    AddVariableNNBN(id: number, position: number, isFixed: boolean, width: number): void;
}
