///  Per-instance results from ProjectionSolver.Solver.Solve().
export class Solution {
    ///  Indicates whether one or more execution limits were exceeded.
    get ExecutionLimitExceeded() {
        return this.TimeLimitExceeded || this.OuterProjectIterationsLimitExceeded || this.InnerProjectIterationsLimitExceeded;
    }
    ///  Shallow-copy everything, including the contained list.
    ///  <returns></returns>
    Clone() {
        const r = new Solution();
        r.GoalFunctionValue = this.GoalFunctionValue;
        r.InnerProjectIterationsLimitExceeded = this.InnerProjectIterationsLimitExceeded;
        r.InnerProjectIterationsTotal = this.InnerProjectIterationsTotal;
        r.MaxConstraintTreeDepth = this.MaxConstraintTreeDepth;
        r.OuterProjectIterations = this.OuterProjectIterations;
        r.OuterProjectIterationsLimitExceeded = this.OuterProjectIterationsLimitExceeded;
        r.AlgorithmUsed = this.AlgorithmUsed;
        r.NumberOfUnsatisfiableConstraints = this.NumberOfUnsatisfiableConstraints;
        r.MaxInnerProjectIterations = this.MaxInnerProjectIterations;
        return r;
    }
}
//# sourceMappingURL=Solution.js.map