import { String } from 'typescript-string-operations';
///  variableDoneEval is NULL if we are starting an evaluation; if recursive, it's the variable
///  on that side from the parent call, which was already processed.
export class DfDvNode {
    //  For DummyParentNode only.
    constructor(dummyConstraint) {
        this.ConstraintToEval = dummyConstraint;
        this.Depth = -1;
        //  The first real node adds 1, so it starts at 0.
    }
    static constructorDCVV(parent, constraintToEval, variableToEval, variableDoneEval) {
        const ret = new DfDvNode(constraintToEval);
        ret.Set(parent, constraintToEval, variableToEval, variableDoneEval);
        return ret;
    }
    Set(parent, constraintToEval, variableToEval, variableDoneEval) {
        this.Parent = parent;
        this.ConstraintToEval = constraintToEval;
        this.VariableToEval = variableToEval;
        this.VariableDoneEval = variableDoneEval;
        this.Depth = 0;
        this.ChildrenHaveBeenPushed = false;
        constraintToEval.Lagrangian = 0;
        return this;
    }
    get IsLeftToRight() {
        return this.VariableToEval == this.ConstraintToEval.Right;
    }
    toString() {
        return String.Format('{0} {1}{2} - {3}{4} ({5})', '', this.IsLeftToRight ? '' : '*', this.ConstraintToEval.Left.Name, this.IsLeftToRight ? '*' : '', this.ConstraintToEval.Right.Name, this.Depth);
    }
}
//# sourceMappingURL=DfDvNode.js.map