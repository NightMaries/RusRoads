import { Stack } from 'stack-typescript';
import { Constraint } from './Constraint';
import { DfDvNode } from './DfDvNode';
import { Parameters } from './Parameters';
export declare class ConstraintVector {
    Vector: Constraint[];
    get IsEmpty(): boolean;
    Create(numConstraints: number): void;
    private nextConstraintIndex;
    Add(constraint: Constraint): void;
    private firstActiveConstraintIndex;
    ActivateConstraint(constraint: Constraint): void;
    DeactivateConstraint(constraint: Constraint): void;
    private SwapConstraint;
    Reinitialize(): void;
    SolverParameters: Parameters;
    DfDvStack: Stack<DfDvNode>;
    DfDvRecycleStack: Stack<DfDvNode>;
    RecycleDfDvNode(node: DfDvNode): void;
    MaxConstraintTreeDepth: number;
    NumberOfUnsatisfiableConstraints: number;
    toString(): string;
}
