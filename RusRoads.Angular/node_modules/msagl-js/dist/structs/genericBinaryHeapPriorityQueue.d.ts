import { GenericHeapElement } from './genericHeapElement';
export declare class GenericBinaryHeapPriorityQueue<T> {
    compare: (a: number, b: number) => number;
    heapSize: number;
    A: GenericHeapElement<T>[];
    cache: Map<T, GenericHeapElement<T>>;
    get count(): number;
    ContainsElement(key: T): boolean;
    constructor(compare?: (a: number, b: number) => number);
    SwapWithParent(i: number): void;
    Enqueue(element: T, priority: number): void;
    IsEmpty(): boolean;
    PutAtI(i: number, h: GenericHeapElement<T>): void;
    Dequeue(): T;
    DequeueAndGetPriority(t: {
        priority: number;
    }): T;
    MoveQueueOneStepForward(ret: T): void;
    DecreasePriority(element: T, newPriority: number): void;
    GetEnumerator(): IterableIterator<T>;
    Peek(t: {
        priority: number;
    }): T;
    toString(): string;
}
