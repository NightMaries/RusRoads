//  A priority queue based on the binary heap algorithm.
//  This class needs a comparer object to compare elements of the queue.
//  <typeparam name="T"></typeparam>
export class BinaryHeapWithComparer {
    constructor(compare) {
        // array of the heap elems starting at A[1]
        this.heapSize = 0;
        this.A = [];
        this.compare = compare;
    }
    Enqueue(element) {
        let i = this.heapSize + 1;
        this.A[i] = element;
        this.heapSize++;
        let j = i >> 1;
        let son;
        let parent;
        while (i > 1 && this.Less((son = this.A[i]), (parent = this.A[j]))) {
            this.A[j] = son;
            this.A[i] = parent;
            i = j;
            j = i >> 1;
        }
    }
    Dequeue() {
        if (this.heapSize < 1) {
            throw new Error();
        }
        const ret = this.A[1];
        const candidate = this.A[this.heapSize];
        this.heapSize--;
        this.ChangeMinimum(candidate);
        return ret;
    }
    ChangeMinimum(candidate) {
        this.A[1] = candidate;
        let j = 1;
        let i = 2;
        let done = false;
        while (i < this.heapSize && !done) {
            done = true;
            // both sons exist
            const leftSon = this.A[i];
            const rigthSon = this.A[i + 1];
            const compareResult = this.compare(leftSon, rigthSon);
            if (compareResult < 0) {
                // left son is the smallest
                if (this.compare(leftSon, candidate) < 0) {
                    this.A[j] = leftSon;
                    this.A[i] = candidate;
                    done = false;
                    j = i;
                    i = j << 1;
                }
            }
            else {
                // right son in not the greatest
                if (this.compare(rigthSon, candidate) < 0) {
                    this.A[j] = rigthSon;
                    this.A[i + 1] = candidate;
                    done = false;
                    j = i + 1;
                    i = j << 1;
                }
            }
        }
        if (i == this.heapSize) {
            // can we do one more step:
            const leftSon = this.A[i];
            if (this.compare(leftSon, candidate) < 0) {
                this.A[j] = leftSon;
                this.A[i] = candidate;
            }
        }
    }
    get Count() {
        return this.heapSize;
    }
    Less(a, b) {
        return this.compare(a, b) < 0;
    }
    GetMinimum() {
        return this.A[1];
    }
}
//# sourceMappingURL=BinaryHeapWithComparer.js.map