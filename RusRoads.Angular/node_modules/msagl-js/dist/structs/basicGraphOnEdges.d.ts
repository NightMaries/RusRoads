import { IEdge } from './iedge';
import { Queue } from 'queue-typescript';
export declare function mkGraphOnEdges<TEdge extends IEdge>(edges: Array<TEdge>): BasicGraphOnEdges<TEdge>;
export declare function mkGraphOnEdgesArray<TEdge extends IEdge>(edges: TEdge[]): BasicGraphOnEdges<TEdge>;
export declare function mkGraphOnEdgesN<TEdge extends IEdge>(edges: TEdge[], numberOfVerts: number): BasicGraphOnEdges<TEdge>;
export declare class BasicGraphOnEdges<TEdge extends IEdge> {
    edges: TEdge[];
    nodeCount: number;
    inEdges: TEdge[][];
    outEdges: TEdge[][];
    selfEdges: TEdge[][];
    incidentEdges(v: number): IterableIterator<TEdge>;
    static deleteFromArray(arr: any, obj: any): void;
    removeEdge(edge: TEdge): void;
    static vertexCount(edges: Iterable<IEdge>): number;
    SetEdges(valEdges: TEdge[], nov: number): void;
    inEdgesCount(node: number): number;
    outEdgesCount(node: number): number;
    selfEdgesCount(node: number): number;
    addEdge(e: TEdge): void;
    nodesOfConnectedGraph(): IterableIterator<number>;
    pred(n: number): IterableIterator<number>;
    succ(n: number): IterableIterator<number>;
    static enqueue(enqueed: Set<number>, q: Queue<number>, i: number): void;
}
