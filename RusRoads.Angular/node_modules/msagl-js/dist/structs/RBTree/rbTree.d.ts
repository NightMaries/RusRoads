import { RBNode } from './rbNode';
export declare class RBTree<T> {
    readonly comparer: (a: T, b: T) => number;
    count: number;
    root: RBNode<T>;
    nil: RBNode<T>;
    [Symbol.iterator](): IterableIterator<T>;
    constructor(comparer: (a: T, b: T) => number);
    clear(): void;
    toNull(y: RBNode<T>): RBNode<T>;
    isEmpty(): boolean;
    getComparer(): (a: T, b: T) => number;
    getRoot(): RBNode<T>;
    find(i: T, x?: RBNode<T>): RBNode<T>;
    findFirst(predicate: (t: T) => boolean, n?: RBNode<T>): RBNode<T>;
    findLast(predicate: (t: T) => boolean, n?: RBNode<T>): RBNode<T>;
    treeMinimum(x?: RBNode<T>): RBNode<T>;
    treeMaximum(x?: RBNode<T>): RBNode<T>;
    next(x: RBNode<T>): RBNode<T>;
    previous(x: RBNode<T>): RBNode<T>;
    private leftRotate;
    private rightRotate;
    private deleteFixup;
    deleteSubTree(z: RBNode<T>): RBNode<T>;
    deleteNodeInternal(x: RBNode<T>): void;
    remove(i: T): RBNode<T>;
    insert(v: T): RBNode<T>;
    treeInsert(z: T): RBNode<T>;
    private insertPrivate;
    allNodes(): IterableIterator<T>;
    toString(): string;
}
