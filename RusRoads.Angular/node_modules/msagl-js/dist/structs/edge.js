import { Entity } from './entity';
export class Edge extends Entity {
    constructor(s, t) {
        super();
        this.source = s;
        this.target = t;
        if (s != t) {
            s.outEdges.add(this);
            t.inEdges.add(this);
        }
        else {
            s.selfEdges.add(this);
        }
    }
    add() {
        if (this.source != this.target) {
            this.source.outEdges.add(this);
            this.target.inEdges.add(this);
        }
        else {
            this.source.selfEdges.add(this);
        }
    }
    remove() {
        if (this.source != this.target) {
            this.source.outEdges.delete(this);
            this.target.inEdges.delete(this);
        }
        else {
            this.source.selfEdges.delete(this);
        }
    }
    toString() {
        return '(' + this.source.toString() + '->' + this.target.toString() + ')';
    }
    isInterGraphEdge() {
        return this.source.parent != this.target.parent;
    }
}
//# sourceMappingURL=edge.js.map